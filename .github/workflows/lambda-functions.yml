# How to package Python dependencies:
#   https://docs.aws.amazon.com/lambda/latest/dg/python-package.html

name: Build and Deploy Lambda Functions

on:
  workflow_call:
    inputs:
      environment:
        description: "Environment to provision (dev|staging|perf|prod}"
        required: false
        default: dev
        type: string
      ref:
        description: "Branch to deploy from"
        required: true
        default: master
        type: string
      lambdaName:
        description: "Lambda to deploy"
        required: false
        default: "All"
        type: string

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}

jobs:
  build-and-deploy-lambda-functions:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: "./lambda_functions"
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ inputs.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2.2.0
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

        # TODO notification-api#1286 - Use lambda layers for user-flows dependencies.
      - name: Package and deploy user-flows lambda function
        if: ${{ (inputs.lambdaName == 'UserFlows') || (inputs.lambdaName == 'All') }}
        run: |
          cd user_flows/
          python3 -m venv venv_user_flows
          source venv_user_flows/bin/activate
          pip install -r requirements-lambda.txt
          deactivate
          cat ../../certs/VA-Internal-S2-ICA11.cer >> ./venv_user_flows/lib/python3.8/site-packages/certifi/cacert.pem
          cat ../../certs/VA-Internal-S2-RCA2.cer >> ./venv_user_flows/lib/python3.8/site-packages/certifi/cacert.pem
          cd venv_user_flows/lib/python3.8/site-packages
          zip -r9 ../../../../user_flows_lambda.zip .
          cd ../../../../
          zip -ugj user_flows_lambda.zip conftest.py steps.py test_retrieve_everything.py user_flows_lambda.py
          aws lambda update-function-code --function-name project-user-flows-lambda --zip-file fileb://user_flows_lambda.zip

        # This function does not have any dependencies.
      - name: Package and deploy SES Callback lambda function
        if: ${{ (inputs.lambdaName == 'SESCallback') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j ses_callback_lambda ses_callback/ses_callback_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-ses-callback-lambda --zip-file fileb://ses_callback_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy Two Way SMS lambda function v1
        if: ${{ (inputs.lambdaName == 'TwoWaySMS') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j two_way_sms_lambda two_way_sms/two_way_sms_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-two-way-sms-lambda --zip-file fileb://two_way_sms_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy Two Way SMS lambda function v2
        if: ${{ (inputs.lambdaName == 'TwoWaySMS') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j two_way_sms two_way_sms/two_way_sms_v2.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-notify-incoming-sms-lambda --zip-file fileb://two_way_sms.zip

        # This function does not have any dependencies.
      - name: Package and deploy pinpoint callback lambda function
        if: ${{ (inputs.lambdaName == 'PinPointCallback') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j pinpoint_callback_lambda pinpoint_callback/pinpoint_callback_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-pinpoint-callback-lambda --zip-file fileb://pinpoint_callback_lambda.zip

        # This function does not have any dependencies.
      - name: Package and deploy pinpoint inbound sms lambda function
        if: ${{ (inputs.lambdaName == 'PinPointInboundSMS') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j pinpoint_inbound_sms_lambda pinpoint_inbound_sms/pinpoint_inbound_sms_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-pinpoint-inbound-sms-lambda --zip-file fileb://pinpoint_inbound_sms_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy VA Profile opt-in/out lambda function
        if: ${{ (inputs.lambdaName == 'ProfileOptInOut') || (inputs.lambdaName == 'All') }}
        run: |
          cd va_profile/
          python3 -m venv venv_va_profile_opt_in_out
          source venv_va_profile_opt_in_out/bin/activate
          pip install PyJWT~=2.6.0
          pip install cryptography~=37.0.4
          deactivate
          cd venv_va_profile_opt_in_out/lib/python3.8/site-packages
          zip -r9 ../../../../va_profile_opt_in_out_lambda.zip .
          cd ../../../../
          zip -ugj va_profile_opt_in_out_lambda va_profile_opt_in_out_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-va-profile-opt-in-out-lambda --zip-file fileb://va_profile_opt_in_out_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy VA Profile remove old opt-outs lambda function
        if: ${{ (inputs.lambdaName == 'ProfileRemoveOldOptOuts') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j va_profile_remove_old_opt_outs_lambda va_profile_remove_old_opt_outs/va_profile_remove_old_opt_outs_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-va-profile-remove-old-opt-outs-lambda --zip-file fileb://va_profile_remove_old_opt_outs_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy nightly stats bigquery upload lambda function
        if: ${{ (inputs.lambdaName == 'NightBigQueryUpload') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j nightly_stats_bigquery_upload_lambda nightly_stats_bigquery_upload/nightly_stats_bigquery_upload_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-nightly-stats-bigquery-upload-lambda --zip-file fileb://nightly_stats_bigquery_upload_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy nightly billing stats upload lambda function
        if: ${{ (inputs.lambdaName == 'NightBillingBQUpload') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j nightly_billing_stats_upload_lambda nightly_billing_bigquery_upload/nightly_billing_stats_upload_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-nightly-billing-stats-upload-lambda --zip-file fileb://nightly_billing_stats_upload_lambda.zip

        # This function uses lambda layers for dependencies.
      - name: Package and deploy vetext incoming forwarder lambda
        if: ${{ (inputs.lambdaName == 'VetTextIncomingForwarder') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j vetext_incoming_forwarder_lambda vetext_incoming_forwarder_lambda/vetext_incoming_forwarder_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-vetext-incoming-forwarder-lambda --zip-file fileb://vetext_incoming_forwarder_lambda.zip

        # This function does not have any dependencies.
      - name: Package and deploy delivery status processing lambda
        if: ${{ (inputs.lambdaName == 'DeliveryStatusProcessor') || (inputs.lambdaName == 'All') }}
        run: |
          zip -j delivery_status_processor_lambda delivery_status_processor_lambda/delivery_status_processor_lambda.py
          aws lambda update-function-code --function-name project-${{ inputs.environment }}-delivery-status-processor-lambda --zip-file fileb://delivery_status_processor_lambda.zip
