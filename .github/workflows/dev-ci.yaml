name: Development CI

on:
  push:
    tags-ignore:
      - '**'
    branches-ignore:
      - 'dependabot/**'
    paths-ignore:
      - 'user_flows/**.py'
      - 'lambda_functions/user_flows/*'
      - '.github/workflows/lambda-functions.yaml'
  pull_request:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run tests with docker-compose-test
        run: |
          docker-compose -f ci/docker-compose-test.yml up --build --abort-on-container-exit --force-recreate

  code-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - run: make check-vulnerabilities

  dependency-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.6'
      - run: make check-dependencies

  build-and-push:
    runs-on: ubuntu-latest
    needs: [test, code-scan, dependency-scan]
    if: github.ref == 'refs/heads/master'
    env:
      IMAGE_REPOSITORY: "notification_api"
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v2
      - name: Build docker image
        run: |
          docker build -t $IMAGE_REPOSITORY:$IMAGE_TAG -f ci/Dockerfile .

      - name: Configure TW AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to TW ECR
        id: login-ecr-tw
        uses: aws-actions/amazon-ecr-login@v1

      - name: Publish to TW ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-tw.outputs.registry }}
        run: |
          docker tag $IMAGE_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG

      - name: Configure VAEC AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 900

      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v1

      - name: Publish to VAEC ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-vaec.outputs.registry }}
        run: |
          docker tag $IMAGE_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG

      - name: Perform twistlock scan
        uses: ./.github/actions/run-commands-on-ec2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-vaec.outputs.registry }}
        with:
          instance-id-ssm-parameter-path: /utility/twistlock/instance
          commands: >-
            "aws --region us-gov-west-1 ecr get-login-password | docker login --username AWS --password-stdin '"$ECR_REGISTRY"' 2>/dev/null",
            "docker pull '"$ECR_REGISTRY"'/'"$IMAGE_REPOSITORY"':'"$IMAGE_TAG"' 1>/dev/null",
            "docker logout '"$ECR_REGISTRY"'",
            "export TWISTLOCK_PASSWORD=$(aws --region us-gov-west-1 ssm get-parameter --name /utility/twistlock/vanotify-ci-user-password --with-decryption | jq '.Parameter.Value' -r)",
            "twistcli images scan --project VaNotify --address https://twistlock.devops.va.gov --user vanotify-ci-user '"$ECR_REGISTRY"'/'"$IMAGE_REPOSITORY"':'"$IMAGE_TAG"'",
            "STATUS_CODE=$?",
            "docker image prune -a -f 1>/dev/null",
            "exit $STATUS_CODE"

  start-tw-dev-deployment:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GH_ACCESS_TOKEN}}
        script: |
          github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'tw-dev',
            required_contexts: [],
            auto_merge: false,
          });

  start-vaec-dev-deployment:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
    - uses: actions/github-script@v3
      with:
        github-token: ${{secrets.GH_ACCESS_TOKEN}}
        script: |
          github.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'dev',
            required_contexts: [],
            auto_merge: false,
          });