name:  Application deployment

on:
  deployment:

jobs:
  run-migrations:
    runs-on: ubuntu-latest
    if: |
      ${{ 'dev' == github.event.deployment.environment || 'staging' == github.event.deployment.environment || 'perf' == github.event.deployment.environment || 'prod' == github.event.deployment.environment }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Set image tag
        id: set-image-tag
        run: |
          echo "::set-output name=image-tag::$(git rev-parse HEAD)"

      - name: Set ECR registry
        id: set-ecr-registry
        uses: actions/github-script@v3
        with:
          script: |
            const inputRepo = '${{ github.event.deployment.payload.imageRepository }}';
            const setImageRepo = (inputRepo) => {
              return '${{ github.event.deployment.environment }}' == 'perf' && inputRepo ? inputRepo : 'notification_api';
            };
            const imageRepo = setImageRepo(inputRepo);
            core.setOutput('ecr-registry', imageRepo);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Render migration task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.set-ecr-registry.outputs.ecr-registry}}
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.image-tag }}
        with:
          task-definition: ./cd/application-deployment/${{ github.event.deployment.environment }}/vaec-db-migrations-task-definition.json
          container-name: ${{ github.event.deployment.environment }}-notification-api-db-migrations
          image: 171875617347.dkr.ecr.us-gov-west-1.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Register migration task definition
        id: register
        run: |
          echo "::set-output name=arn::$(aws ecs register-task-definition --cli-input-json file://${{ steps.render.outputs.task-definition}} | jq -r '.taskDefinition.taskDefinitionArn')"

      - name: Run migration task
        run: |
          bash ./scripts/run_ci_migrations.sh -c ${{ github.event.deployment.environment }}-notification-cluster -e ${{ github.event.deployment.environment }} -t ${{ steps.register.outputs.arn }}

  deploy-api:
    runs-on: ubuntu-latest
    needs: [run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Set image tag
        id: set-image-tag
        run: |
          echo "::set-output name=image-tag::$(git rev-parse HEAD)"

      - name: Set ECR registry
        id: set-ecr-registry
        uses: actions/github-script@v3
        with:
          script: |
            const inputRepo = '${{ github.event.deployment.payload.imageRepository }}';
            const setImageRepo = (inputRepo) => {
              return '${{ github.event.deployment.environment }}' == 'perf' && inputRepo ? inputRepo : 'notification_api';
            };
            const imageRepo = setImageRepo(inputRepo);
            core.setOutput('ecr-registry', imageRepo);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Render API task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.set-ecr-registry.outputs.ecr-registry}}
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.image-tag }}
        with:
          task-definition: ./cd/application-deployment/${{ github.event.deployment.environment }}/vaec-api-task-definition.json
          container-name: notification-api
          image: 171875617347.dkr.ecr.us-gov-west-1.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Deploy API task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: ${{ github.event.deployment.environment }}-notification-api-service
          cluster: ${{ github.event.deployment.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery:
    runs-on: ubuntu-latest
    needs: [run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Set image tag
        id: set-image-tag
        run: |
          echo "::set-output name=image-tag::$(git rev-parse HEAD)"

      - name: Set ECR registry
        id: set-ecr-registry
        uses: actions/github-script@v3
        with:
          script: |
            const inputRepo = '${{ github.event.deployment.payload.imageRepository }}';
            const setImageRepo = (inputRepo) => {
              return '${{ github.event.deployment.environment }}' == 'perf' && inputRepo ? inputRepo : 'notification_api';
            };
            const imageRepo = setImageRepo(inputRepo);
            core.setOutput('ecr-registry', imageRepo);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Render celery task definition
        id: render-celery-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.set-ecr-registry.outputs.ecr-registry}}
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.image-tag }}
        with:
          task-definition: ./cd/application-deployment/${{ github.event.deployment.environment }}/vaec-celery-task-definition.json
          container-name: notification-celery
          image: 171875617347.dkr.ecr.us-gov-west-1.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Deploy celery task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-celery-container.outputs.task-definition }}
          service: ${{ github.event.deployment.environment }}-notification-celery-service
          cluster: ${{ github.event.deployment.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery-beat:
    runs-on: ubuntu-latest
    needs: [run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Set image tag
        id: set-image-tag
        run: |
          echo "::set-output name=image-tag::$(git rev-parse HEAD)"

      - name: Set ECR registry
        id: set-ecr-registry
        uses: actions/github-script@v3
        with:
          script: |
            const inputRepo = '${{ github.event.deployment.payload.imageRepository }}';
            const setImageRepo = (inputRepo) => {
              return '${{ github.event.deployment.environment }}' == 'perf' && inputRepo ? inputRepo : 'notification_api';
            };
            const imageRepo = setImageRepo(inputRepo);
            core.setOutput('ecr-registry', imageRepo);

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Render celery beat task definition
        id: render-celery-beat-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        env:
          ECR_REGISTRY: ${{ steps.set-ecr-registry.outputs.ecr-registry}}
          IMAGE_TAG: ${{ steps.set-image-tag.outputs.image-tag }}
        with:
          task-definition: ./cd/application-deployment/${{ github.event.deployment.environment }}/vaec-celery-beat-task-definition.json
          container-name: notification-celery-beat
          image: 171875617347.dkr.ecr.us-gov-west-1.amazonaws.com/${{ env.ECR_REGISTRY }}:${{ env.IMAGE_TAG }}

      - name: Deploy celery beat task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-celery-beat-container.outputs.task-definition }}
          service: ${{ github.event.deployment.environment }}-notification-celery-beat-service
          cluster: ${{ github.event.deployment.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-lambdas:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: './lambda_functions'
    needs: [run-migrations]
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Package and deploy SES Callback lambda function
        run: |
          zip -j ses_callback_lambda ses_callback/ses_callback_lambda.py
          aws lambda update-function-code --function-name project-${{ github.event.deployment.environment }}-ses-callback-lambda --zip-file fileb://ses_callback_lambda.zip

      - name: Package and deploy Two Way SMS lambda function
        run: |
          zip -j two_way_sms_lambda two_way_sms/two_way_sms_lambda.py
          aws lambda update-function-code --function-name project-${{ github.event.deployment.environment }}-two-way-sms-lambda --zip-file fileb://two_way_sms_lambda.zip

      - name: Package and deploy pinpoint callback lambda function
        run: |
          zip -j pinpoint_callback_lambda pinpoint_callback/pinpoint_callback_lambda.py
          aws lambda update-function-code --function-name project-${{ github.event.deployment.environment }}-pinpoint-callback-lambda --zip-file fileb://pinpoint_callback_lambda.zip

      - name: Package and deploy pinpoint inbound sms lambda function
        run: |
          zip -j pinpoint_inbound_sms_lambda pinpoint_inbound_sms/pinpoint_inbound_sms_lambda.py
          aws lambda update-function-code --function-name project-${{ github.event.deployment.environment }}-pinpoint-inbound-sms-lambda --zip-file fileb://pinpoint_inbound_sms_lambda.zip

  run-user-flows:
    runs-on: ubuntu-latest
    needs: [run-migrations, deploy-api, deploy-celery, deploy-celery-beat, deploy-lambdas]
    if: ${{ 'dev' == github.event.deployment.environment }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.deployment.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Invoke user flows lambda function
        shell: bash {0}
        run: |
          RESULT=$(aws lambda invoke --invocation-type RequestResponse --function-name project-user-flows-lambda --cli-binary-format raw-in-base64-out --payload '{"environment": "${{github.event.deployment.environment}}"}' --log-type Tail user_flows_exit_code.txt)
          echo $RESULT | jq '.LogResult' -r | base64 --decode
          if [ `jq '.StatusCode' <<< $RESULT` -ne 200 ]; then echo -e "Handler Response: $RESULT" && exit 1; fi
          EXIT_CODE=$(cat user_flows_exit_code.txt)
          echo -e "User Flows Tests Exit Code: $EXIT_CODE"
          if [ $EXIT_CODE -ne 0 ]; then exit 1; else exit $EXIT_CODE; fi

  deployment-status:
    runs-on: ubuntu-latest
    needs: [run-migrations, deploy-api, deploy-celery, deploy-celery-beat, run-user-flows, deploy-lambdas]
    if: always()
    steps:
      - uses: actions/github-script@v3
        with:
          github-token: ${{secrets.GH_ACCESS_TOKEN}}
          previews: 'flash-preview,ant-man-preview'
          script: |
            const needs = ${{ toJson(needs) }};
            let deploymentState = Object.entries(needs).reduce((state, jobEntry) => {
              const [job, value] = jobEntry;
              if (state === "failure" || value.result === "failure") return "failure";
              if (state === "error" || value.result === "cancelled") return "error";
              if (value.result === "skipped") return state;
              return state;
            }, "success");
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: deploymentState,
              auto_inactive: true,
              log_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}/checks`,
              environment: "${{ github.event.deployment.environment }}"
            });