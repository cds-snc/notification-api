name: api deploy

permissions:
  contents: read
  actions: write
  id-token: write

on:
  workflow_call:
    inputs:
      environment:
        required: true
        default: "dev"
        type: string
      ref:
        required: true
        default: "main"
        type: string

jobs:
  run-migrations:
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.OIDC_DEPLOY_ROLE_PREFIX }}-${{ inputs.environment }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Render migration task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ inputs.environment }}/vaec-db-migrations-task-definition.json
          container-name: ${{ inputs.environment }}-notification-api-db-migrations
          image: ${{ steps.login-ecr-vaec.outputs.registry }}/notification_api:${{ inputs.ref }}
          environment-variables: |
            DD_VERSION=${{ inputs.ref }}
          docker-labels: |
            VERSION=${{ inputs.ref }}

      - name: Register migration task definition
        id: register
        run: |
          echo "arn=$(aws ecs register-task-definition --cli-input-json file://${{ steps.render.outputs.task-definition}} | jq -r '.taskDefinition.taskDefinitionArn')" >> $GITHUB_OUTPUT

      - name: Run migration task
        run: |
          bash ./scripts/run_ci_migrations.sh -c ${{ inputs.environment }}-notification-cluster -e ${{ inputs.environment }} -t ${{ steps.register.outputs.arn }}

  run-smoke-tests:
    needs: [run-migrations]
    uses: ./.github/workflows/run-regression.yml
    with:
      environment: ${{ inputs.environment }}
      # smoke is 'false' in prod; 'true' otherwise
      smoke: ${{ inputs.environment == 'prod' && 'false' || 'true' }}
    secrets: inherit

  deploy-api:
    runs-on: ${{ vars.RUNS_ON }}
    needs: [run-smoke-tests]
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.OIDC_DEPLOY_ROLE_PREFIX }}-${{ inputs.environment }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800
      
      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Render API task definition
        id: render-api-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ inputs.environment }}/vaec-api-task-definition.json
          container-name: notification-api
          image: ${{ steps.login-ecr-vaec.outputs.registry }}/notification_api:${{ inputs.ref }}
          environment-variables: |
            DD_VERSION=${{ inputs.ref }}
          docker-labels: |
            VERSION=${{ inputs.ref }}

      - name: Deploy API task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-api-container.outputs.task-definition }}
          service: ${{ inputs.environment }}-notification-api-service
          cluster: ${{ inputs.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery:
    runs-on: ${{ vars.RUNS_ON }}
    needs: [run-smoke-tests]
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.OIDC_DEPLOY_ROLE_PREFIX }}-${{ inputs.environment }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800
      
      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Render celery task definition
        id: render-celery-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ inputs.environment }}/vaec-celery-task-definition.json
          container-name: notification-celery
          image: ${{ steps.login-ecr-vaec.outputs.registry }}/notification_api:${{ inputs.ref }}
          environment-variables: |
              DD_VERSION=${{ inputs.ref }}
          docker-labels: |
              VERSION=${{ inputs.ref }}

      - name: Deploy celery task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-celery-container.outputs.task-definition }}
          service: ${{ inputs.environment }}-notification-celery-service
          cluster: ${{ inputs.environment }}-notification-cluster
          wait-for-service-stability: true

  deploy-celery-beat:
    runs-on: ${{ vars.RUNS_ON }}
    needs: [run-smoke-tests]
    steps:
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.ref }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.OIDC_DEPLOY_ROLE_PREFIX }}-${{ inputs.environment }}
          role-skip-session-tagging: true
          role-duration-seconds: 1800

      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v2
        with:
          mask-password: 'true'

      - name: Render celery beat task definition
        id: render-celery-beat-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./cd/application-deployment/${{ inputs.environment }}/vaec-celery-beat-task-definition.json
          container-name: notification-celery-beat
          image: ${{ steps.login-ecr-vaec.outputs.registry }}/notification_api:${{ inputs.ref }}
          environment-variables: |
            DD_VERSION=${{ inputs.ref }}
          docker-labels: |
            VERSION=${{ inputs.ref }}

      - name: Deploy celery beat task definition to Fargate
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-celery-beat-container.outputs.task-definition }}
          service: ${{ inputs.environment }}-notification-celery-beat-service
          cluster: ${{ inputs.environment }}-notification-cluster
          wait-for-service-stability: true

