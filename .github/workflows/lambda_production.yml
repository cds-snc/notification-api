
name: Build and push lambda image to production

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ${{ secrets.PRODUCTION_API_LAMBDA_ECR_ACCOUNT }}.dkr.ecr.ca-central-1.amazonaws.com/notify

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ["api-lambda"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_ECR_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1
          
      - name: Retrieve New Relic Lambda layer
        run: |
          aws lambda get-layer-version-by-arn \
          --region ca-central-1 \
          --arn arn:aws:lambda:ca-central-1:451483290750:layer:NewRelicPython39:12 \
          | jq -r '.Content.Location' \
          | xargs curl -o newrelic-layer.zip        

      - name: Build container
        run: |
          docker build \
          --build-arg GIT_SHA=${GITHUB_SHA::7} \
          -t $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} \
          . \
          -f ci/Dockerfile.lambda

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7}

      - name: Generate docker SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@4c6b386722985552f3f008d04279a3f01402cc35 # renovate: tag=v1
        with:
          dependency_track_api_key: ${{ secrets.DEPENDENCY_TRACK_API_KEY }}
          docker_image: $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7}
          project_name: notification-api/docker/lambda
          project_type: docker

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
