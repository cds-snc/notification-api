
name: Build, push, and deploy lambda image to staging

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/notify

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ["api-lambda"]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Build container
        run: |
          docker build \
          --build-arg GIT_SHA=${GITHUB_SHA::7} \
          -t $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} \
          . \
          -f ci/Dockerfile.lambda

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7 # v1.7.1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7}

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.image }} \
            --image-uri $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} > /dev/null 2>&1

      - name: Set Lambda New Relic Toggle and Env Var Names
        run: |
          set -euo pipefail

          PARAM_NAME="ENVIRONMENT_VARIABLES"
          RAW=$(aws ssm get-parameter \
            --name "$PARAM_NAME" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)

          # Extract NEW_RELIC_ENABLED (default to false if absent)
          NEW_RELIC_ENABLED=$(printf '%s\n' "$RAW" | grep '^NEW_RELIC_ENABLED=' | head -n1 | cut -d '=' -f2- || true)
          if [ -z "${NEW_RELIC_ENABLED}" ]; then
            NEW_RELIC_ENABLED=false
          fi

          # Build CONFIG_KEYS: list of all keys (names only)
          CONFIG_KEYS=$(printf '%s\n' "$RAW" | grep -v '^[[:space:]]*$' | grep -v '^#' | cut -d '=' -f 1 | paste -sd ',' -)

          # Truncate CONFIG_KEYS if extremely long to avoid hitting limits
          MAX_LEN=3500
          if [ ${#CONFIG_KEYS} -gt $MAX_LEN ]; then
            CONFIG_KEYS_TRUNCATED="${CONFIG_KEYS:0:$MAX_LEN}"
            echo "CONFIG_KEYS truncated from ${#CONFIG_KEYS} to ${#CONFIG_KEYS_TRUNCATED} characters" >&2
            CONFIG_KEYS="$CONFIG_KEYS_TRUNCATED"
          fi

          # Overwrite entire static environment: only keep these two keys
          jq -n \
            --arg nr "$NEW_RELIC_ENABLED" \
            --arg keys "$CONFIG_KEYS" \
            '{NEW_RELIC_ENABLED:$nr, CONFIG_KEYS:$keys}' > merged_env.json

          echo "Static injection summary (environment fully replaced):" >&2
          echo "  NEW_RELIC_ENABLED=$NEW_RELIC_ENABLED" >&2
          echo "  CONFIG_KEYS (count)=$(echo "$CONFIG_KEYS" | awk -F',' '{print NF}')" >&2

          aws lambda update-function-configuration \
            --function-name ${{ matrix.image }} \
            --environment "Variables=$(cat merged_env.json)"

      - name: Publish lambda version and update alias
        run: |
          aws lambda wait function-updated --function-name ${{ matrix.image }}
          VERSION="$(aws lambda publish-version --function-name ${{ matrix.image }} | jq -r '.Version')"
   
          aws lambda update-alias \
            --function-name ${{ matrix.image }} \
            --name latest \
            --function-version "$VERSION" > /dev/null 2>&1

      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json='{"text":"<!here> CI is failing in <https://github.com/cds-snc/notification-api/actions/runs/'${{ github.run_id }}'|notification-api> !"}'
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_WEBHOOK }}
