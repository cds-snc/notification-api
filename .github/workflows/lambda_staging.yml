
name: Build, push, and deploy lambda image to staging

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ${{ secrets.STAGING_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/notify

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ["api-lambda"]

    steps:
      - name: Checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@5fd3084fc36e372ff1fff382a39b10d03659f355 # v2.2.0
        with:
          aws-access-key-id: ${{ secrets.STAGING_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Build container
        run: |
          docker build \
          --build-arg GIT_SHA=${GITHUB_SHA::7} \
          -t $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} \
          . \
          -f ci/Dockerfile.lambda

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@5a88a04c91d5c6f97aae0d9be790e64d9b1d47b7 # v1.7.1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7}

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.image }} \
            --image-uri $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} > /dev/null 2>&1

      - name: Set Lambda env pointers (NOTIFY_SSM_PARAMETER, CONFIG_KEYS, NEW_RELIC_ENABLED)
        run: |
          # Fetch the aggregated SSM parameter containing all env-style lines
          PARAM_VALUE=$(aws ssm get-parameter \
            --name ENVIRONMENT_VARIABLES \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text)

          # Derive list of key names (handle both KEY=VALUE lines and possible JSON {"K":"V"})
          if echo "$PARAM_VALUE" | grep -q '^{'; then
            # JSON mode
            KEY_NAMES=$(printf '%s' "$PARAM_VALUE" | jq -r 'keys[]')
          else
            # .env mode
            KEY_NAMES=$(printf '%s' "$PARAM_VALUE" | grep -E '^[A-Za-z0-9_]+=' | cut -d '=' -f1 | sort -u)
          fi

          # Build comma-separated list
            CONFIG_KEYS=$(printf '%s\n' "$KEY_NAMES" | paste -sd, -)

          # Extract NEW_RELIC_ENABLED value (prefer SSM blob, fallback existing env)
          NEW_RELIC_ENABLED_VALUE=""
          if echo "$PARAM_VALUE" | grep -q '^NEW_RELIC_ENABLED='; then
            NEW_RELIC_ENABLED_VALUE=$(echo "$PARAM_VALUE" | grep '^NEW_RELIC_ENABLED=' | tail -n1 | cut -d '=' -f2-)
          fi
          # Fallback to existing function value if not in param
          EXISTING_VARS=$(aws lambda get-function-configuration \
            --function-name ${{ matrix.image }} \
            --query 'Environment.Variables' \
            --output json)
          if [ -z "$NEW_RELIC_ENABLED_VALUE" ]; then
            NEW_RELIC_ENABLED_VALUE=$(echo "$EXISTING_VARS" | jq -r '."NEW_RELIC_ENABLED" // empty')
          fi

          # Build merged environment: preserve everything, then overwrite/add the three keys
          jq \
            --arg ssm_param "ENVIRONMENT_VARIABLES" \
            --arg config_keys "$CONFIG_KEYS" \
            --arg new_relic_enabled "$NEW_RELIC_ENABLED_VALUE" \
            '. + {NOTIFY_SSM_PARAMETER:$ssm_param, CONFIG_KEYS:$config_keys} + (if $new_relic_enabled != "" then {NEW_RELIC_ENABLED:$new_relic_enabled} else {} end)' \
            <<< "$EXISTING_VARS" > merged_env.json

          aws lambda update-function-configuration \
            --function-name ${{ matrix.image }} \
            --environment "Variables=$(cat merged_env.json)"

      - name: Publish lambda version and update alias
        run: |
          aws lambda wait function-updated --function-name ${{ matrix.image }}
          VERSION="$(aws lambda publish-version --function-name ${{ matrix.image }} | jq -r '.Version')"
   
          aws lambda update-alias \
            --function-name ${{ matrix.image }} \
            --name latest \
            --function-version "$VERSION" > /dev/null 2>&1

      - name: Notify Slack channel if this job failed
        if: ${{ failure() }}
        run: |
          json='{"text":"<!here> CI is failing in <https://github.com/cds-snc/notification-api/actions/runs/'${{ github.run_id }}'|notification-api> !"}'
          curl -X POST -H 'Content-type: application/json' --data "$json"  ${{ secrets.SLACK_WEBHOOK }}
