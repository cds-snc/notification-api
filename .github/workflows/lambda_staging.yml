
name: Build, push, and deploy lambda image to staging

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  REGISTRY: ${{ secrets.STAGING_API_LAMBDA_ECR_ACCOUNT }}.dkr.ecr.ca-central-1.amazonaws.com/notify

jobs:
  build-push-and-deploy:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        image: ["api-lambda"]

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: aws-creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.STAGING_ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.STAGING_ECR_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Retrieve New Relic Lambda layer
        run: |
          aws lambda get-layer-version-by-arn \
          --region ca-central-1 \
          --arn arn:aws:lambda:ca-central-1:451483290750:layer:NewRelicPython39:12 \
          | jq -r '.Content.Location' \
          | xargs curl -o newrelic-layer.zip

      - name: Build container
        run: |
          docker build \
          --build-arg GIT_SHA=${GITHUB_SHA::7} \
          -t $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} \
          . \
          -f ci/Dockerfile.lambda

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push containers to ECR
        run: |
          docker push $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7}

      - name: Logout of Amazon ECR
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.image }} \
            --image-uri $REGISTRY/${{ matrix.image }}:${GITHUB_SHA::7} > /dev/null 2>&1

      - name: Publish lambda version and update alias
        run: |
          aws lambda wait function-updated --function-name ${{ matrix.image }}
          VERSION="$(aws lambda publish-version --function-name ${{ matrix.image }} | jq -r '.Version')"
   
          aws lambda update-alias \
            --function-name ${{ matrix.image }} \
            --name latest \
            --function-version "$VERSION" > /dev/null 2>&1
