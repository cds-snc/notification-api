name: Manual Build
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to provision (dev|staging|perf)"
        required: true
        default: "dev"
      branch:
        description: "Branch to deploy from"
        required: true
    paths-ignore:
      - "user_flows/**.py"
      - "lambda_functions/*"
      - ".github/workflows/lambda-functions.yaml"

jobs:
  build-container:
    runs-on: ubuntu-latest
    env:
      IMAGE_REPOSITORY: "notification_api"
    steps:
      - name: Validate environment
        shell: bash {0}
        run: |
          ENVS=(dev staging perf)
          INPUT="${{ github.event.inputs.environment }}"
          APPROVED=false

          for env in ${ENVS[@]}; do
              if [[ "$env" == "$INPUT" ]]; then
                APPROVED=true
                break
              fi
          done

          if [[ $APPROVED == true ]]; then
            echo -e "$INPUT is a valid environment"
            exit 0
          else
            echo -e "$INPUT is not a valid environment"
            exit 1
          fi

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Set tags
        id: set-tag
        run: echo "::set-output name=image-tag::"$(git rev-parse HEAD)""

      - name: Configure VAEC AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.VAEC_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.VAEC_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-gov-west-1
          role-to-assume: ${{ secrets.VAEC_DEPLOY_ROLE }}
          role-skip-session-tagging: true
          role-duration-seconds: 900

      - name: Login to VAEC ECR
        id: login-ecr-vaec
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Build
        uses: docker/build-push-action@v3
        with:
          file: ci/Dockerfile
          context: .
          push: true
          tags: ${{ steps.login-ecr-vaec.outputs.registry }}/${{ env.IMAGE_REPOSITORY}}:${{ steps.set-tag.outputs.image-tag }}

  start-deployment:
    runs-on: ubuntu-latest
    needs: build-container
    steps:
      - uses: actions/github-script@v6
        with:
          github-token: ${{secrets.GH_ACCESS_TOKEN}}
          script: |
            const payload = {"imageRepository": "notification_api"}
            github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.payload.inputs.branch,
              environment: context.payload.inputs.environment,
              required_contexts: [],
              auto_merge: false,
              payload: payload,
            });
