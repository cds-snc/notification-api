name: Continuous Deployment Pipeline
# Note:
# This workflow is designed to be triggered by a merge to the default branch.
# Therefore, ${{ github.sha }} will always be in reference to the SHA that originally triggered this workflow.
# $GITHUB_SHA, on the other hand, is created whenever actions/checkout@v4 is run.

# note:
# environment:
  # name:
# is keyword for using the environment protections.

# with: 
  # environment:
# is simply using a variable named environment 

permissions:
  contents: write
  actions: write
  id-token: write

on:
  push:
    branches:
      - main

jobs:
  prepare-deployment:
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

  pr-label-summary:
    needs: prepare-deployment
    uses: ./.github/workflows/pr-label-semver.yml
    secrets: inherit

  approval-deploy-perf:
    needs: prepare-deployment
    environment: 
      name: perf-deploy
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Pause for manual approval
        run: |
          echo "Deploying commit SHA ${{ github.sha }}, the latest merge to main"
          echo "Deployment paused for manual approval."

  build-push-artifacts:
    needs: approval-deploy-perf
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      - name: Build and Push Artifacts
        uses: ./.github/actions/build-push-artifacts
        with:
          ref: ${{ github.sha }}
          role-to-assume: ${{ secrets.OIDC_DEPLOY_ROLE_PREFIX }}-${{ inputs.environment }}

  deploy-to-perf:
    needs: build-push-artifacts
    uses: ./.github/workflows/deploy-release.yml
    secrets: inherit
    with:
      environment: perf
      ref: ${{ github.sha }}
      lambdaDeploy: true
  
  approval-deploy:
    needs: deploy-to-perf
    environment: 
      name: staging-deploy
    runs-on: ${{ vars.RUNS_ON }}
    steps:
      - name: Pause for manual approval
        run: echo "Deployment paused for manual approval to staging and production."

  pre-tag-summary:
    needs: approval-deploy
    uses: ./.github/workflows/pre-tag-summary.yml
    secrets: inherit

  create-and-post-tag:
    needs: pre-tag-summary
    uses: ./.github/workflows/create-and-post-tag.yml
    secrets: inherit

  create-release-notes:
    needs: create-and-post-tag
    uses: ./.github/workflows/create-release-notes.yml
    secrets: inherit
    with:
      previousVersion: ${{ needs.create-and-post-tag.outputs.previousVersion }}
      newVersion: ${{ needs.create-and-post-tag.outputs.newVersion }}

  deploy-to-staging:
    needs: [approval-deploy, create-and-post-tag]
    uses: ./.github/workflows/deploy-release.yml
    secrets: inherit
    with:
      environment: staging
      ref: ${{ github.sha }}
      lambdaDeploy: true

  deploy-to-prod:
    if: vars.CODE_FREEZE == 'false'
    needs: [deploy-to-staging, create-and-post-tag]
    uses: ./.github/workflows/deploy-release.yml
    secrets: inherit
    with:
      environment: prod
      ref: ${{ github.sha }}
      lambdaDeploy: true

  send-slack-notifications:
    needs: [create-release-notes, create-and-post-tag, deploy-to-prod]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
    
      - name: Post to VA Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.VA_NOTIFY_PUBLIC_SLACK_URL }}
          TAG: ${{ needs.create-and-post-tag.outputs.newVersion }}
        run: |
          curl -X POST -H 'Content-type: application/json' \
          --data "{
            \"text\": \":llama: Production Release Alert :llama:\n*Notification-API* \`${TAG}\` was released to production.\n:rocket: *<https://github.com/department-of-veterans-affairs/notification-api/releases/tag/${TAG}|Release notes are here>*\"
          }" \
          "$SLACK_WEBHOOK_URL"
