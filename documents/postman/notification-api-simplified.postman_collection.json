{
	"info": {
		"_postman_id": "b86aae08-ab5e-4e02-9f98-b54712346590",
		"name": "notification-api-simplified",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30982915"
	},
	"item": [
		{
			"name": "/v2/notifications",
			"item": [
				{
					"name": "send SMS",
					"item": [
						{
							"name": "send sms with phone_number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{sms-template-id}}\",\n    \"phone_number\": \"+16502532222\",\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\",\n    \"sms_sender_id\": \"{{sms-sender-id}}\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/sms",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"sms"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback.\n\nsms_sender_id is an optional property, which overrides the service level sms sender."
							},
							"response": []
						},
						{
							"name": "send sms with recipient_identifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{sms-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\",\n    \"sms_sender_id\": \"{{sms-sender-id}}\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/sms",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"sms"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback.\n\nsms_sender_id is an optional property, which overrides the service level sms sender."
							},
							"response": []
						}
					]
				},
				{
					"name": "send EMAIL",
					"item": [
						{
							"name": "send email with email_address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{email-template-id}}\",\n    \"email_address\": \"test@email.com\",\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/email",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"email"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback."
							},
							"response": []
						},
						{
							"name": "send email with recipient_identifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{email-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/email",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"email"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback."
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Push",
					"item": [
						{
							"name": "send push notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile_app\": \"VA_FLAGSHIP_APP\",\n    \"template_id\": \"{{vetext-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"ICN\",\n        \"id_value\": \"{{icn}}\"\n    },\n    \"personalisation\": {\n        \"appointment_date\": \"bar\",\n        \"appointment_time\": \"foo\"\n    }\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/push",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"push"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
							},
							"response": []
						},
						{
							"name": "send push broadcast notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile_app\": \"VA_FLAGSHIP_APP\",\n    \"template_id\": \"{{vetext-template-id}}\",\n    \"topic_sid\": \"{{vetext-topic-sid}}\",\n    \"personalisation\": {\n        \"message\": \"The app has been updated!\"\n    }\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/push/broadcast",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"push",
										"broadcast"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
							},
							"response": []
						}
					]
				},
				{
					"name": "get notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get(\"service-api-key\");",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"service-id\"),",
									"\t'iat': currentTimestamp",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/v2/notifications/{{notification-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"v2",
								"notifications",
								"{{notification-id}}"
							]
						},
						"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
					},
					"response": []
				}
			]
		}
	]
}
