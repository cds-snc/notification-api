{
	"info": {
		"_postman_id": "5cdc9981-9219-449c-87c4-93b21c04b0f4",
		"name": "notification-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "smoke-test",
			"item": [
				{
					"name": "healthcheck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Check if status is ok\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.status).to.eql(\"ok\");",
									"})",
									"",
									"pm.test(\"Check if commit is correct\", function() {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.git_commit).to.eql(pm.environment.get('expected-git-sha'));",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{notification-api-url}}/_status",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"_status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/auth",
			"item": [
				{
					"name": "login",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 200) {",
									"    var jsonData = pm.response.json(); ",
									"    if (jsonData.result === \"success\") {",
									"        pm.environment.set(\"user-jwt\", jsonData.token);",
									"    }",
									"} "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"strictSSL": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"your-password-here\",\n    \"email_address\": \"must-be-admin-user\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url-private}}/auth/login",
							"host": [
								"{{notification-api-url-private}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/user",
			"item": [
				{
					"name": "create user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"user-id\", jsonData.id);",
									"} else {",
									"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/user/email?email=saman.moshafi@thoughtworks.com\";",
									"    pm.sendRequest({",
									"        url: url,",
									"        method: 'GET',",
									"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
									"    }, function (err, res) {",
									"        pm.environment.set(\"user-id\", res.json().data.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"some password\",\n    \"email_address\": \"some email\",\n    \"mobile_number\": \"+16502532222\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/user",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "create admin user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"user-id\", jsonData.id);",
									"} else {",
									"    var url = \"https://\" + pm.environment.get(\"notification-api-url\") + \"/user/email?email=saman.moshafi@thoughtworks.com\";",
									"    pm.sendRequest({",
									"        url: url,",
									"        method: 'GET',",
									"        header: 'authorization: Bearer ' + pm.environment.get(\"jwt_signed\"),",
									"    }, function (err, res) {",
									"        pm.environment.set(\"user-id\", res.json().data.id);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"some password\",\n    \"email_address\": \"some email\",\n    \"mobile_number\": \"+16502532222\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\",\n    \"platform_admin\": true\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/user",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "get users",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/user",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "get user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{notification-api-url}}/user/{{user-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"user",
								"{{user-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Test User\",\n    \"password\": \"some-password\",\n    \"email_address\": \"some-email\",\n    \"mobile_number\": \"+16502532222\",\n    \"state\": \"active\",\n    \"user_permissions\": [\n        \"manage_templates\",\n        \"send_texts\",\n        \"manage_settings\",\n        \"send_emails\",\n        \"manage_api_keys\"\n    ],\n    \"auth_type\": \"sms_auth\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/user",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"user"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/v2/notifications",
			"item": [
				{
					"name": "send SMS",
					"item": [
						{
							"name": "send sms with phone_number",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{sms-template-id}}\",\n    \"phone_number\": \"+16502532222\",\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\",\n    \"sms_sender_id\": \"{{sms-sender-id}}\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/sms",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"sms"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback.\n\nsms_sender_id is an optional property, which overrides the service level sms sender."
							},
							"response": []
						},
						{
							"name": "send sms with recipient_identifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"type": "text",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{sms-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\",\n    \"sms_sender_id\": \"{{sms-sender-id}}\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/sms",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"sms"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback.\n\nsms_sender_id is an optional property, which overrides the service level sms sender."
							},
							"response": []
						}
					]
				},
				{
					"name": "send EMAIL",
					"item": [
						{
							"name": "send email with email_address",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{email-template-id}}\",\n    \"email_address\": \"test@email.com\",\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/email",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"email"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback."
							},
							"response": []
						},
						{
							"name": "send email with recipient_identifier",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"template_id\": \"{{email-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"callback_url\": \"https://staging-api.va.gov/vanotify/internal/swagger\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/email",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"email"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token.\n\ncallback_url is an optional property, which overrides the service level callback."
							},
							"response": []
						}
					]
				},
				{
					"name": "Send Push",
					"item": [
						{
							"name": "send push notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile_app\": \"VETEXT\",\n    \"template_id\": \"{{vetext-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"ICN\",\n        \"id_value\": \"{{icn}}\"\n    },\n    \"personalisation\": {\n        \"appointment_date\": \"bar\",\n        \"appointment_time\": \"foo\"\n    }\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/push",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"push"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
							},
							"response": []
						},
						{
							"name": "send push broadcast notification",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get(\"service-api-key\");",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"service-id\"),",
											"\t'iat': currentTimestamp",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"notification-id\", jsonData.id);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{jwt_signed}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"mobile_app\": \"VETEXT\",\n    \"template_id\": \"{{vetext-template-id}}\",\n    \"topic_sid\": \"{{vetext-topic-sid}}\",\n    \"personalisation\": {\n        \"message\": \"The app has been updated!\"\n    }\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/v2/notifications/push/broadcast",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"v2",
										"notifications",
										"push",
										"broadcast"
									]
								},
								"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
							},
							"response": []
						}
					]
				},
				{
					"name": "get notification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get(\"service-api-key\");",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"service-id\"),",
									"\t'iat': currentTimestamp",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/v2/notifications/{{notification-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"v2",
								"notifications",
								"{{notification-id}}"
							]
						},
						"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
					},
					"response": []
				}
			]
		},
		{
			"name": "/v3/notifications",
			"item": [
				{
					"name": "send e-mail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get(\"service-api-key\");",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"service-id\"),",
									"\t'iat': currentTimestamp",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"notification-id\", jsonData.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email_address\": \"veteran@email.com\",\n    \"template_id\": \"{{email-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"email_reply_to_id\": \"uuid\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/v3/notifications/email",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"v3",
								"notifications",
								"email"
							]
						},
						"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
					},
					"response": []
				},
				{
					"name": "send SMS",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get(\"service-api-key\");",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"service-id\"),",
									"\t'iat': currentTimestamp",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"notification-id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"phone_number\": \"+16502532222\",\n    \"template_id\": \"{{sms-template-id}}\",\n    \"recipient_identifier\": {\n        \"id_type\": \"VAPROFILEID\",\n        \"id_value\": \"example\"\n    },\n    \"sms_sender_id\": \"{{sms-sender-id}}\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/v3/notifications/sms",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"v3",
								"notifications",
								"sms"
							]
						},
						"description": "api-key field combines key name, service id and secret:\n<key name>-<service id>-<secret>\nwhere secret is the return value when calling create api key\nThis is important as the jwt token for sending message should use service-id and service-api-key to generate the JWT bearer token"
					},
					"response": []
				}
			]
		},
		{
			"name": "/service",
			"item": [
				{
					"name": "/template",
					"item": [
						{
							"name": "for EMAIL",
							"item": [
								{
									"name": "create EMAIL template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 201) {",
													"    var jsonData = pm.response.json(); ",
													"    pm.environment.set(\"email-template-id\", jsonData.data.id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"email\",\n    \"content\": \"This is a test email\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\",\n    \"communication_item_id\": \"{{communication-item-id}}\"\n}"
										},
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template"
											]
										}
									},
									"response": []
								},
								{
									"name": "update EMAIL template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"some name\",\n    \"subject\": \"some subject\",\n    \"template_type\": \"email\",\n    \"content\": \"some content\",\n    \"service\": \"{{service-id}}\",\n    \"communication_item_id\": \"{{communication-item-id}}\"\n}"
										},
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{email-template-id}}",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template",
												"{{email-template-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "get EMAIL template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// JWT generation script adapted from",
													"// https://gist.github.com/corbanb/",
													"",
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{email-template-id}}",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template",
												"{{email-template-id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "for SMS",
							"item": [
								{
									"name": "update SMS template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"some name\",\n    \"subject\": \"some subject\",\n    \"template_type\": \"sms\",\n    \"content\": \"some content\",\n    \"service\": \"{{service-id}}\",\n    \"communication_item_id\": \"{{communication-item-id}}\"\n}"
										},
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{sms-template-id}}",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template",
												"{{sms-template-id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create SMS template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// JWT generation script adapted from",
													"// https://gist.github.com/corbanb/",
													"",
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"if (pm.response.code == 201) {",
													"    var jsonData = pm.response.json(); ",
													"    pm.environment.set(\"sms-template-id\", jsonData.data.id);",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"test template\",\n    \"subject\": \"test subject\",\n    \"template_type\": \"sms\",\n    \"content\": \"This is a test SMS message\",\n    \"service\": \"{{service-id}}\",\n    \"created_by\": \"{{user-id}}\",\n    \"communication_item_id\": \"{{communication-item-id}}\"\n}"
										},
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template"
											]
										}
									},
									"response": []
								},
								{
									"name": "get SMS template",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// JWT generation script adapted from",
													"// https://gist.github.com/corbanb/",
													"",
													"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
													"",
													"// Set headers for JWT",
													"var header = {",
													"\t'typ': 'JWT',",
													"\t'alg': 'HS256'",
													"};",
													"",
													"// Prepare timestamp in seconds",
													"var currentTimestamp = Math.floor(Date.now() / 1000)",
													"",
													"var data = {",
													"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
													"\t'iat': currentTimestamp,",
													"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
													"\t'jti': 'jwt_nonce'",
													"}",
													"",
													"",
													"function base64url(source) {",
													"    // Encode in classical base64",
													"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
													"    ",
													"    // Remove padding equal characters",
													"    encodedSource = encodedSource.replace(/=+$/, '')",
													"    ",
													"    // Replace characters according to base64url specifications",
													"    encodedSource = encodedSource.replace(/\\+/g, '-')",
													"    encodedSource = encodedSource.replace(/\\//g, '_')",
													"    ",
													"    return encodedSource",
													"}",
													"",
													"// encode header",
													"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
													"var encodedHeader = base64url(stringifiedHeader)",
													"",
													"// encode data",
													"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
													"var encodedData = base64url(stringifiedData)",
													"",
													"// build token",
													"var token = `${encodedHeader}.${encodedData}`",
													"",
													"// sign token",
													"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
													"signature = base64url(signature)",
													"var signedToken = `${token}.${signature}`",
													"",
													"pm.environment.set('jwt_signed', signedToken)",
													"console.log('Signed and encoded JWT', signedToken)"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{jwt_signed}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{sms-template-id}}",
											"host": [
												"{{notification-api-url}}"
											],
											"path": [
												"service",
												"{{service-id}}",
												"template",
												"{{sms-template-id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "get templates for service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/template",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"template"
									]
								}
							},
							"response": []
						},
						{
							"name": "create html preview",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"#Confirmation\\n\\n##Hello\\n\\nHello ((name)),\\n\\n((placeholder)) __bold text__ \\n\\n--------\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/template/preview",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"template",
										"preview"
									]
								}
							},
							"response": []
						},
						{
							"name": "get html preview",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{template-id}}/preview-html",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"template",
										"{{template-id}}",
										"preview-html"
									]
								}
							},
							"response": []
						},
						{
							"name": "get template",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{template-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"template",
										"{{template-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "get template stats",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/template/{{template-id}}/stats",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"template",
										"{{template-id}}",
										"stats"
									],
									"query": [
										{
											"key": "start_date",
											"value": "2020-10-10",
											"disabled": true
										},
										{
											"key": "end_date",
											"value": "2020-10-21",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/sms-sender",
					"item": [
						{
							"name": "create sms sender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"used for xyz\",\r\n    \"provider_id\": \"uuid_of_provider\",\r\n    \"sms_sender\": \"+12025551212\",\r\n    \"is_default\": false\r\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/sms-sender",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"sms-sender"
									]
								}
							},
							"response": []
						},
						{
							"name": "get sms senders",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/sms-sender",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"sms-sender"
									]
								}
							},
							"response": []
						},
						{
							"name": "update sms sender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"used for xyz\",\r\n    \"provider_id\": \"uuid_of_provider\",\r\n    \"sms_sender\": \"+12025551212\",\r\n    \"is_default\": false,\r\n    \"rate_limit\": 3000\r\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/sms-sender/{{sms-sender-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"sms-sender",
										"{{sms-sender-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete sms sender",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"sms_sender\": \"+12025551212\",\r\n    \"is_default\": true\r\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/sms-sender/{{sms-sender-id}}/archive",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"sms-sender",
										"{{sms-sender-id}}",
										"archive"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/user",
					"item": [
						{
							"name": "add user to service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permissions\": [\n        {\"permission\": \"manage_templates\"},\n        {\"permission\": \"manage_settings\"},\n        {\"permission\": \"manage_api_keys\"},\n        {\"permission\": \"manage_users\"},\n        {\"permission\": \"send_emails\"},\n        {\"permission\": \"send_texts\"},\n        {\"permission\": \"view_activity\"},\n        {\"permission\": \"edit_templates\"}\n    ]\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/users/{{user-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"users",
										"{{user-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update service user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"permissions\": [\n        {\"permission\": \"manage_templates\"},\n        {\"permission\": \"manage_settings\"},\n        {\"permission\": \"manage_api_keys\"},\n        {\"permission\": \"send_emails\"},\n        {\"permission\": \"send_texts\"},\n        {\"permission\": \"manage_users\"},\n        {\"permission\": \"view_activity\"}\n\n    ]\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/users/{{user-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"users",
										"{{user-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete user from service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/db03150abbe899285d6a86cc480f674d",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/users/{{user-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"users",
										"{{user-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/callback",
					"item": [
						{
							"name": "create service callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"https://some-url.com\",\n    \"callback_type\": \"delivery_status\",\n    \"callback_channel\": \"webhook\",\n    \"bearer_token\": \"static-bearer-token-used-to-authenticate-request\",\n    \"notification_statuses\": [\"sent\", \"delivered\", \"failed\", \"temporary-failure\", \"permanent-failure\" ]\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback"
									]
								}
							},
							"response": []
						},
						{
							"name": "get service callbacks",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback"
									]
								}
							},
							"response": []
						},
						{
							"name": "get service callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback/{{callback-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback",
										"{{callback-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "delete service callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback/{{callback-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback",
										"{{callback-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "update service callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"https://httpreq.com/{{unique-bucket-name}}/record\",\n    \"bearer_token\": \"{{bearer-token}}\",\n    \"notification_statuses\": []\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback/{{callback-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback",
										"{{callback-id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "[TESTING] update service callback",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"url\": \"https://httpreq.com/{{unique-bucket-name}}/record\",\n    \"updated_by_id\": \"{{user-id}}\",\n    \"bearer_token\": \"{{bearer-token}}\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/callback/{{callback-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"callback",
										"{{callback-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/api-key",
					"item": [
						{
							"name": "create api key for service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code == 201) {",
											"    var jsonData = pm.response.json(); ",
											"    pm.environment.set(\"service-api-key\", jsonData.data);",
											"}",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"created_by\": \"{{user-id}}\",\n    \"key_type\": \"normal\",\n    \"name\": \"postmantestapikey\"\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/api-key",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"api-key"
									]
								}
							},
							"response": []
						},
						{
							"name": "get api keys for service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/api-keys",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"api-keys"
									]
								}
							},
							"response": []
						},
						{
							"name": "revoke api key for service",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// JWT generation script adapted from",
											"// https://gist.github.com/corbanb/",
											"",
											"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
											"",
											"// Set headers for JWT",
											"var header = {",
											"\t'typ': 'JWT',",
											"\t'alg': 'HS256'",
											"};",
											"",
											"// Prepare timestamp in seconds",
											"var currentTimestamp = Math.floor(Date.now() / 1000)",
											"",
											"var data = {",
											"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
											"\t'iat': currentTimestamp,",
											"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
											"\t'jti': 'jwt_nonce'",
											"}",
											"",
											"",
											"function base64url(source) {",
											"    // Encode in classical base64",
											"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
											"    ",
											"    // Remove padding equal characters",
											"    encodedSource = encodedSource.replace(/=+$/, '')",
											"    ",
											"    // Replace characters according to base64url specifications",
											"    encodedSource = encodedSource.replace(/\\+/g, '-')",
											"    encodedSource = encodedSource.replace(/\\//g, '_')",
											"    ",
											"    return encodedSource",
											"}",
											"",
											"// encode header",
											"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
											"var encodedHeader = base64url(stringifiedHeader)",
											"",
											"// encode data",
											"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
											"var encodedData = base64url(stringifiedData)",
											"",
											"// build token",
											"var token = `${encodedHeader}.${encodedData}`",
											"",
											"// sign token",
											"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
											"signature = base64url(signature)",
											"var signedToken = `${token}.${signature}`",
											"",
											"pm.environment.set('jwt_signed', signedToken)",
											"console.log('Signed and encoded JWT', signedToken)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{jwt_signed}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/api-key/revoke/{{api-key-id}}",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"api-key",
										"revoke",
										"{{api-key-id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "/whitelist",
					"item": [
						{
							"name": "get service whitelist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/whitelist",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"whitelist"
									]
								}
							},
							"response": []
						},
						{
							"name": "update service whitelist",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user-jwt}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"email_addresses\": [\n        \"success@simulator.amazonses.com\",\n        \"bounce@simulator.amazonses.com\",\n        \"suppressionlist@simulator.amazonses.com\",\n        \"complaint@simulator.amazonses.com\",\n        \"ooto@simulator.amazonses.com\"\n    ],\n    \"phone_numbers\": []\n}"
								},
								"url": {
									"raw": "{{notification-api-url}}/service/{{service-id}}/whitelist",
									"host": [
										"{{notification-api-url}}"
									],
									"path": [
										"service",
										"{{service-id}}",
										"whitelist"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "create service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"service-id\", jsonData.data.id);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Some service\",\n    \"user_id\": \"{{user-id}}\",\n    \"organisation_id\": \"{{organization-id}}\",\n    \"rate_limit\": 3000,\n    \"message_limit\": 100,\n    \"restricted\": true,\n    \"active\": true,\n    \"created_by\": \"{{user-id}}\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/service",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "update service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"main service for Govdelivery\",\n    \"user_id\": \"{{user-id}}\",\n    \"organisation_id\": \"{{organization-id}}\",\n    \"message_limit\": 1000,\n    \"restricted\": false,\n    \"active\": true,\n    \"email-from\": \"{{email-from}}\",\n    \"created_by\": \"{{user-id}}\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/service/{{service-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"service",
								"{{service-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get services",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/service",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"service"
							]
						}
					},
					"response": []
				},
				{
					"name": "get service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/service/{{service-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"service",
								"{{service-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "get service by name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"service-id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{notification-api-url}}/service/find-services-by-name?service_name={{service-name}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"service",
								"find-services-by-name"
							],
							"query": [
								{
									"key": "service_name",
									"value": "{{service-name}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/organisation",
			"item": [
				{
					"name": "create organisation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code == 201) {",
									"    var jsonData = pm.response.json(); ",
									"    pm.environment.set(\"organization-id\", jsonData.id);",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"test organization 2\",\n    \"active\": true,\n    \"organisation_type\": \"other\",\n    \"crown\": false\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/organisations",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"organisations"
							]
						}
					},
					"response": []
				},
				{
					"name": "get organisations",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/organisations",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"organisations"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/provider-details",
			"item": [
				{
					"name": "get provider details",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/provider-details",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"provider-details"
							]
						}
					},
					"response": []
				},
				{
					"name": "get provider detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/provider-details/{{provider-detail-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"provider-details",
								"{{provider-detail-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update provider detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": 5,\n    \"load_balancing_weight\": null, \n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/provider-details/{{provider-detail-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"provider-details",
								"{{provider-detail-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update provider detail",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{jwt_signed}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"priority\": 50,\n    \"active\": true\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/provider-details/{{provider-detail-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"provider-details",
								"{{provider-detail-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/communication-item",
			"item": [
				{
					"name": "create communication item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"default_send_indicator\": true,\n    \"name\": \"\",\n    \"va_profile_item_id\": <positive integer>\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/communication-item",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"communication-item"
							]
						}
					},
					"response": []
				},
				{
					"name": "get all communication items",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/communication-item",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"communication-item"
							]
						}
					},
					"response": []
				},
				{
					"name": "get communication item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/communication-item/{{communication-item-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"communication-item",
								"{{communication-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "partially update communication item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"default_send_indicator\": true,\n    \"name\": \"\",\n    \"va_profile_item_id\": <positive integer>\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/communication-item/{{communication-item-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"communication-item",
								"{{communication-item-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete communication item",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/communication-item/{{communication-item-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"communication-item",
								"{{communication-item-id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/inbound-number",
			"item": [
				{
					"name": "create inbound-number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"number\": \"+12234567890\",\n    \"provider\": \"pinpoint\",\n    \"auth_parameter\": \"/auth/param/name\",\n    \"self_managed\": false,\n    \"url_endpoint\": \"https://example.url.com\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/inbound-number",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number"
							]
						}
					},
					"response": []
				},
				{
					"name": "get inbound-numbers",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/inbound-number",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number"
							]
						}
					},
					"response": []
				},
				{
					"name": "get inbound-numbers available",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/inbound-number/available",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number",
								"available"
							]
						}
					},
					"response": []
				},
				{
					"name": "get inbound-numbers for service",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{notification-api-url}}/inbound-number/service/{{service-id}}",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number",
								"service",
								"{{service-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "update inbound-number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"active\": true,\n    \"number\": \"55555\",\n    \"provider\": \"updated-provider-pinpoint\",\n    \"self_managed\": true,\n    \"url_endpoint\": \"https://example.url.com\",\n    \"auth_parameter\": \"updated-auth-param\"\n}"
						},
						"url": {
							"raw": "{{notification-api-url}}/inbound-number/:inbound-number-id",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number",
								":inbound-number-id"
							],
							"variable": [
								{
									"key": "inbound-number-id",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "deactivate inbound-number",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// JWT generation script adapted from",
									"// https://gist.github.com/corbanb/",
									"",
									"var jwtSecret = pm.environment.get('notification-client-secret') || ''",
									"",
									"// Set headers for JWT",
									"var header = {",
									"\t'typ': 'JWT',",
									"\t'alg': 'HS256'",
									"};",
									"",
									"// Prepare timestamp in seconds",
									"var currentTimestamp = Math.floor(Date.now() / 1000)",
									"",
									"var data = {",
									"\t'iss': pm.environment.get(\"notification-admin-id\") || '',",
									"\t'iat': currentTimestamp,",
									"\t'exp': currentTimestamp + 30, // expiry time is 30 seconds from time of creation",
									"\t'jti': 'jwt_nonce'",
									"}",
									"",
									"",
									"function base64url(source) {",
									"    // Encode in classical base64",
									"    encodedSource = CryptoJS.enc.Base64.stringify(source)",
									"    ",
									"    // Remove padding equal characters",
									"    encodedSource = encodedSource.replace(/=+$/, '')",
									"    ",
									"    // Replace characters according to base64url specifications",
									"    encodedSource = encodedSource.replace(/\\+/g, '-')",
									"    encodedSource = encodedSource.replace(/\\//g, '_')",
									"    ",
									"    return encodedSource",
									"}",
									"",
									"// encode header",
									"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header))",
									"var encodedHeader = base64url(stringifiedHeader)",
									"",
									"// encode data",
									"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data))",
									"var encodedData = base64url(stringifiedData)",
									"",
									"// build token",
									"var token = `${encodedHeader}.${encodedData}`",
									"",
									"// sign token",
									"var signature = CryptoJS.HmacSHA256(token, jwtSecret)",
									"signature = base64url(signature)",
									"var signedToken = `${token}.${signature}`",
									"",
									"pm.environment.set('jwt_signed', signedToken)",
									"console.log('Signed and encoded JWT', signedToken)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_signed}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{notification-api-url}}/inbound-number/:inbound-number-id/off",
							"host": [
								"{{notification-api-url}}"
							],
							"path": [
								"inbound-number",
								":inbound-number-id",
								"off"
							],
							"variable": [
								{
									"key": "inbound-number-id",
									"value": "2d5f4534-be8e-4cd8-9421-79ff0441f241"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}