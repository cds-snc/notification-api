openapi: 3.0.3
info:
  title: VA Notify API Documentation
  version: 1.2.0
  description: |
    <p>This documents the API schemas for consumption by internal VA developers.</p>
    <h1>Authorization header</h1>
    <p>You must include an authorization header that is encoded using JSON Web Tokens.  JSON Web Tokens have a standard header and a payload. The header consists of:</p>
    <pre><code>{
        &quot;type&quot;: &quot;JWT&quot;,
        &quot;alg&quot;: &quot;HS256&quot;
    }</code></pre>
    <p>The payload consists of `iss` and `iat`. `iss` is the `service_id` that is sending the notification, and `iat` is the 'Issued At' timestamp in seconds since Unix epoch. Here is an example payload:</p>
    <pre><code>{
        &quot;iss&quot;: &quot;26785a09-ab16-4eb0-8407-a37497a57506&quot;,
        &quot;iat&quot;: 1568818578
    }</code></pre>
    <p>Refer to the <a href='https://jwt.io/' target='_blank'>JSON Web Tokens website</a> for more information on encoding your authorization header.</p>
  contact:
    name: VA Notify team
servers:
  - url: "https://{environment}.notifications.va.gov"
    description: PRIVATE, used inside the VA Network
    variables:
      environment:
        enum:
          - api
          - staging.api
          - perf.api
          - dev.api
        default: api
  - url: "https://{environment}.va.gov/vanotify"
    description: PUBLIC, used outside of the VA Network
    variables:
      environment:
        enum:
          - api
          - staging-api
          - sandbox-api
          - dev-api
        default: api
paths:
  /organisations:
    get:
      summary: Get list of all organisations
      tags:
        - organisation
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrganisationSummary"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create an organisation
      tags:
        - organisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  type: boolean
                name:
                  type: string
                organisation_type:
                  type: string
                  enum:
                    - other
              required:
                - crown
                - name
                - organisation_type
              type: object
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationDetails"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /organisations/{organisation_id}/:
    get:
      summary: Find organisation by id
      tags:
        - organisation
      parameters:
        - $ref: "#/components/parameters/OrganisationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrganisationDetails"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Update an organization
      tags:
        - organisation
      parameters:
        - $ref: "#/components/parameters/OrganisationId"
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  nullable: true
                  type: boolean
                name:
                  nullable: true
                  type: string
                organisation_type:
                  type: string
                  enum:
                    - other
      responses:
        "204":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /user:
    post:
      summary: Create a user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get a list of all users
      tags:
        - user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
  /user/{user_id}:
    get:
      summary: Get a user
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/UserId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

    post:
      summary: Update a user
      tags:
        - user
      parameters:
        - $ref: "#/components/parameters/UserId"
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                email_address:
                  type: string
                mobile_number:
                  type: string
                  example: "+12025551212"
                auth_type:
                  type: string
                  enum:
                    - sms_auth
                    - email_auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service:
    post:
      summary: Create a service
      tags:
        - service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateServiceRequest"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: Get all services
      tags:
        - service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Service"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      summary: Get a service
      tags:
        - service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Update a service
      tags:
        - service
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Service"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Service"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/sms-sender:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      summary: Get all sms-senders for a service
      tags:
        - sms sender
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ServiceSmsSender"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Add sms sender for a service
      description: Note that setting is_default to True will have the side-effect of setting the current default to False.
      tags:
        - sms sender
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                inbound_number_id:
                  $ref: "#/components/schemas/Id"
                is_default:
                  type: boolean
                  example: false
                provider_id:
                  $ref: "#/components/schemas/Id"
                rate_limit:
                  type: integer
                  minimum: 1
                rate_limit_interval:
                  type: integer
                  minimum: 1
                sms_sender:
                  type: string
                  example: "+12025551212"
                sms_sender_specifics:
                  description: Arbitrary JSON relevant to a specific messaging service provider
                  type: object
                  example: '{"messaging_service_sid": "MG0000000000000000000000"}'
              required:
                - description
                - is_default
                - provider_id
                - sms_sender
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceSmsSender"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/sms-sender/{sms-sender-id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/ServiceSmsSenderId"
    get:
      summary: Get specific sms sender for a service
      tags:
        - sms sender
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceSmsSender"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Update sms sender for a service
      description: Note that updating is_default to True will have the side-effect of setting the current default to False.
      tags:
        - sms sender
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                inbound_number_id:
                  $ref: "#/components/schemas/Id"
                is_default:
                  type: boolean
                  example: false
                provider_id:
                  $ref: "#/components/schemas/Id"
                rate_limit:
                  type: integer
                  minimum: 1
                rate_limit_interval:
                  type: integer
                  minimum: 1
                sms_sender:
                  type: string
                sms_sender_specifics:
                  description: Arbitrary JSON relevant to a specific messaging service provider
                  type: object
                  example: '{"messaging_service_sid": "MG0000000000000000000000"}'
              minProperties: 1
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServiceSmsSender"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/sms-sender/{sms-sender-id}/archive:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/ServiceSmsSenderId"
    post:
      summary: Delete aka archive an sms sender
      tags:
        - sms sender
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ServiceSmsSender"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/callback:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      summary: Get all callbacks for a service
      tags:
        - callback
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/ServiceCallback"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a callback for a service
      tags:
        - callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateCallbackRequest"
                - $ref: "#/components/schemas/CreateDeliveryStatusCallbackRequest"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ServiceCallback"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/callback/{callback_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/CallbackId"
    get:
      summary: Get a callback for a service by its id
      tags:
        - callback
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ServiceCallback"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Update a callback for a service
      tags:
        - callback
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCallbackRequest"
      responses:
        "200":
          description: UPDATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/ServiceCallback"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Remove a callback for a service
      tags:
        - callback
      responses:
        "204":
          description: DELETED
          content:
            application/json:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/template:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      summary: Get all templates for a service
      tags:
        - template
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Template"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Create a template for a service
      tags:
        - template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/CreateTemplateRequestSms"
                - $ref: "#/components/schemas/CreateTemplateRequestEmail"
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Template"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/template/{template_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/TemplateId"
    get:
      summary: Get a template for a service
      tags:
        - template
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Template"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Update a template
      tags:
        - template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateTemplateRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Template"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/template/preview:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    post:
      summary: Cretate template html preview
      tags:
        - template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateHTMLPreviewRequest"
      responses:
        "200":
          description: OK
          content:
            text/html:
              schema:
                type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/template/{template_id}/stats:
    get:
      summary: Get usage statistics for a particular template on a service
      tags:
        - template
      parameters:
        - $ref: "#/components/parameters/ServiceId"
        - $ref: "#/components/parameters/TemplateId"
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          required: false
          description: Oldest date to get stats for
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          required: false
          description: Newest date to get stats for
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"

  /communication-item:
    get:
      summary: Retrieve a list of all communication items
      tags:
        - communication-item
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/CommunicationItem"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      summary: Create a new communication item
      tags:
        - communication-item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunicationItemCreate"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationItem"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /communication-item/{communication_item_id}:
    parameters:
      - $ref: "#/components/parameters/CommunicationItemId"
    get:
      summary: Retrieve a communication item by ID
      tags:
        - communication-item
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationItem"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Update a communication item by ID
      tags:
        - communication-item
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommunicationItemUpdate"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommunicationItem"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Delete a communication item by ID
      tags:
        - communication-item
      responses:
        "202":
          description: Accepted
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"

  /service/{service_id}/api-key:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    post:
      tags:
        - api key
      summary: Create API key for service
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                created_by:
                  $ref: "#/components/schemas/Id"
                key_type:
                  type: string
                  enum:
                    - normal
                    - team
              required:
                - name
                - created_by
                - key_type
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                description: The API Key
                type: object
                properties:
                  data:
                    $ref: "#/components/schemas/Id"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/api-key/revoke/{api_key_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/ApiKeyId"
    post:
      tags:
        - api key
      summary: Revoke API key
      responses:
        "202":
          description: OK
          content:
            application/json:
              schema:
                type: object
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/api-keys:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      tags:
        - api key
      summary: Get API keys for a service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: "#/components/schemas/APIKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /service/{service_id}/api-keys/{api_key_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
      - $ref: "#/components/parameters/ApiKeyId"
    get:
      tags:
        - api key
      summary: Get a specific API key for a service
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: "#/components/schemas/APIKey"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/AdminAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplemented"
  /v2/notifications/email:
    post:
      summary: Send an email notification
      description: |
        ### Required properties

        * `template_id` - The UUID of the template
        * `email_address` - The email address of the recipient
        * _or_ `recipient_identifier` - a VAPROFILEID, ICN, EDIPI, PID, or BIRLSID (see examples)

        ### Optional properties

        * `billing_code` - A string to indicate your billing code
        * `callback_url` - An https URL; note that this overrides any service level callback
        * `personalisation` - A JSON object containing the fields needed to populate the notification template. See **Advanced Usage** section and **dynamic bullet list** example for details.
        * `reference` - A string to indicate any reference
        * `scheduled_for` - A datetime indicated when to send the notification (not available at this time)

        ### Advanced usage

          The `personalisation` JSON object allows for dynamic customization of the notification template by passing variables:

          - **Keys**: Represent variable names defined in the notification template.
          - **Values**: Specify the data to replace the variables. Values can be:
            - **Strings**: Used for simple text replacement.
            - **Lists**: Rendered as bulleted lists in the email notification.
            ```

      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailNotificationRequest"
            examples:
              email:
                value:
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  email_address: test@notification.com
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  billing_code: string
                  callback_url: https://staging-api.va.gov/vanotify/internal/swagger
                  reference: string
                  scheduled_for: string
              recipient_identifier:
                value:
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  billing_code: string
                  callback_url: https://staging-api.va.gov/vanotify/internal/swagger
                  reference: string
                  scheduled_for: string
              dynamic bulleted list:
                value:
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  email_address: test@notification.com
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                    tasks:
                      - "Task 1"
                      - "Task 2"
                      - "Task 3"
                  billing_code: string
                  callback_url: https://staging-api.va.gov/vanotify/internal/swagger
                  reference: string
                  scheduled_for: string
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Notification"
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          body:
                            type: string
                          subject:
                            type: string
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ServiceAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "501":
          $ref: "#/components/responses/NotImplemented"
  /v2/notifications/sms:
    post:
      summary: Send an sms notification
      description: |
        ### Required properties

        * `template_id` - The UUID of the template
        * `phone_number` - The mobile phone number of the recipient
        * _or_ `recipient_identifier` - a VAPROFILEID, ICN, EDIPI, PID, or BIRLSID (see examples)

        ### Optional properties

        * `billing_code` - A string to indicate your billing code
        * `callback_url` - An https URL; note that this overrides any service level callback
        * `personalisation` - If the template includes personalisation, the fields to populate (see examples)
        * `reference` - A string to indicate any reference
        * `scheduled_for` - A datetime indicated when to send the notification (not available at this time)
        * `sms_sender_id` - A UUID; note that this overrides any service level sms sender

      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SMSNotificationRequest"
            examples:
              phone_number:
                value:
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  phone_number: "+12125551212"
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  billing_code: string
                  callback_url: https://staging-api.va.gov/vanotify/internal/swagger
                  reference: string
                  scheduled_for: string
                  sms_sender_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
              recipient_identifier:
                value:
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  billing_code: string
                  callback_url: https://staging-api.va.gov/vanotify/internal/swagger
                  reference: string
                  scheduled_for: string
                  sms_sender_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
      responses:
        "201":
          description: CREATED
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Notification"
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          body:
                            type: string
                          from_number:
                            type: string
                            example: "+12025551212"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ServiceAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "429":
          $ref: "#/components/responses/RateLimitError"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v2/notifications/push:
    post:
      summary: Send a push notification to a mobile app
      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PushNotificationRequest"
      responses:
        "201":
          $ref: "#/components/responses/PushCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ServiceAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /v2/notifications/push/broadcast:
    post:
      summary: Send a push notification to the mobile app of all subscribers
      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PushNotificationBroadcastRequest"
      responses:
        "201":
          $ref: "#/components/responses/PushCreated"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ServiceAuthError"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /v2/notifications/{notification_id}:
    get:
      summary: Get notification status and details
      security:
        - serviceAuth: []
      tags:
        - notification
      parameters:
        - $ref: "#/components/parameters/NotificationId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotificationStatusResponse"
              examples:
                sms:
                  value:
                    billing_code: string
                    body: string
                    callback_url: string
                    completed_at: 2022-11-28T18:59:00.542420Z
                    cost_in_millicents: 634.0
                    created_at: 2022-11-28T18:58:18.998715Z
                    created_by_name: string
                    email_address: null
                    id: string
                    line_1: string
                    line_2: string
                    line_3: string
                    line_4: string
                    line_5: string
                    line_6: string
                    phone_number: "+10123456789"
                    postage: string
                    postcode: string
                    provider_reference: egsqaoi2hjok3mi0mlelijfk3i8ckalt5tsu6s00
                    recipient_identifiers: []
                    reference: string
                    scheduled_for: 2022-11-30T19:00:00.542420Z
                    segments_count: 2
                    sent_at: 2022-11-28T18:59:18.998715Z
                    sent_by: string
                    status: created
                    status_reason: string
                    subject: string
                    template:
                      id: a21a1888-af44-4cb4-8d20-19bd0d3902f9
                      uri: string
                      version: 0
                    type: sms

                email:
                  value:
                    billing_code: string
                    body: string
                    completed_at: 2022-11-28T18:59:18.998715Z
                    cost_in_millicents: 0.0
                    created_at: 2022-11-28T18:58:18.998715Z
                    created_by_name: string
                    email_address: user@example.com
                    id: string
                    line_1: string
                    line_2: string
                    line_3: string
                    line_4: string
                    line_5: string
                    line_6: string
                    phone_number: null
                    postage: string
                    postcode: string
                    provider_reference: egsqaoi2hjok3mi0mlelijfk3i8ckalt5tsu6s00
                    recipient_identifiers: []
                    reference: string
                    scheduled_for: 2022-11-30T19:00:00.542420Z
                    segments_count: 0
                    sent_at: 2022-11-28T18:59:18.998715Z
                    sent_by: string
                    status: created
                    status_reason: string
                    subject: string
                    template:
                      id: a21a1888-af44-4cb4-8d20-19bd0d3902f9
                      uri: string
                      version: 0
                    type: email
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/ServiceAuthError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /v3/notifications/email:
    post:
      summary: Send an e-mail notification
      tags:
        - notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V3NotificationsEmailRequest"
            examples:
              email:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  email_address: "test@notification.com"
              recipient_identifier:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
              both:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  email_address: "test@notification.com"
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
        required: true
      responses:
        "202":
          $ref: "#/components/responses/AcceptedV3"
        "400":
          $ref: "#/components/responses/BadRequestV3"
        "401":
          $ref: "#/components/responses/Unauthorized_401_V3"
        "403":
          $ref: "#/components/responses/Unauthorized_403_V3"
  /v3/notifications/sms:
    post:
      summary: Send a SMS notification
      tags:
        - notification
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/V3NotificationsSMSRequest"
            examples:
              phone_number:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  sms_sender_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  phone_number: "+12025551212"
              recipient_identifier:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  sms_sender_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
              both:
                value:
                  reference: string
                  client_reference: string
                  template_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  personalisation:
                    full_name: John Smith
                    claim_id: "123456"
                  scheduled_for: "2023-09-06T19:55:23.592973+00:00"
                  billing_code: string
                  sms_sender_id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
                  phone_number: "+12025551212"
                  recipient_identifier:
                    id_type: ICN
                    id_value: 1000000000V000000
        required: true
      responses:
        "202":
          $ref: "#/components/responses/AcceptedV3"
        "400":
          $ref: "#/components/responses/BadRequestV3"
        "401":
          $ref: "#/components/responses/Unauthorized_401_V3"
        "403":
          $ref: "#/components/responses/Unauthorized_403_V3"
  /inbound-number:
    get:
      summary: Retrieve an inbound number
      tags:
        - inbound-number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundNumbersGetResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
    post:
      summary: Create an inbound number
      tags:
        - inbound-number
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InboundNumberCreateRequest"
            examples:
              selfManagedFalse url optional:
                value:
                  active: true
                  auth_parameter: "auth-param-name"
                  number: "+10123456789"
                  provider: "ExampleProvider"
                  self_managed: false
                  url_endpoint: "http://example.com/api"
              selfManagedTrue url *required:
                value:
                  active: true
                  auth_parameter: "auth-param-name"
                  number: "+12025551212"
                  provider: "ExampleProvider"
                  self_managed: true
                  url_endpoint: "http://example.com/api"
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundNumberCreateResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /inbound-number/available:
    get:
      summary: Retrieve available inbound numbers that are not assigned to a service
      tags:
        - inbound-number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundNumbersGetResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /inbound-number/{inbound_number_id}:
    post:
      summary: Update an inbound number
      tags:
        - inbound-number
      parameters:
        - $ref: "#/components/parameters/InboundNumberId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InboundNumberUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundNumberCreateResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /inbound-number/{inbound_number_id}/off:
    post:
      summary: Set the inbound number as off (active = false)
      tags:
        - inbound-number
      parameters:
        - $ref: "#/components/parameters/InboundNumberId"
      responses:
        "204":
          description: NO CONTENT
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
  /inbound-number/service/{service_id}:
    parameters:
      - $ref: "#/components/parameters/ServiceId"
    get:
      summary: Get inbound numbers for a service
      tags:
        - inbound-number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InboundNumbersGetResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "500":
          $ref: "#/components/responses/InternalServerError"
        "502":
          $ref: "#/components/responses/BadGateway"
        "503":
          $ref: "#/components/responses/ServiceUnavailable"
components:
  parameters:
    InboundNumberId:
      name: inbound_number_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Inbound number identifier
    OrganisationId:
      name: organisation_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Organisation identifier
    UserId:
      name: user_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: User identifier
    ServiceId:
      name: service_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Service identifier
    CallbackId:
      name: callback_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Callback identifier
    TemplateId:
      name: template_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Template identifier
    ApiKeyId:
      name: api_key_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: API Key identifier
    NotificationId:
      name: notification_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Notification identifier
    ServiceSmsSenderId:
      name: sms-sender-id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: Service SMS sender identifier
    CommunicationItemId:
      name: communication_item_id
      in: path
      schema:
        $ref: "#/components/schemas/Id"
      required: true
      description: CommunicationItem identifier
      example: e925b547-8195-4ed2-83c5-0633a74d780a
  responses:
    PushCreated:
      description: CREATED
      content:
        application/json:
          schema:
            type: object
            properties:
              result:
                type: string
                example: "success"
    AcceptedV3:
      description: Accepted
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V3AcceptedResponse"
          example:
            id: 9ffb5212-e621-45df-820d-97ee65d392ab
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V2ErrorMessage"
          example:
            errors:
              - error: "BadRequestError"
                message: "sms_sender_id e925b547-8195-4ed2-83c5-0633a74d780a does not exist in database
                  for service id 9ffb5212-e621-45df-820d-97ee65d392ab"
            status_code: 400
    BadRequestV3:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V3ErrorResponse"
          example:
            errors:
              - error: ValidationError
                message: "template_id is not a valid uuid"
    Unauthorized:
      description: No Bearer authentication provided
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message:
              token:
                - "Unauthorized, authentication token must be provided"
    Unauthorized_401_V3:
      description: Not authenticated
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V3ErrorResponse"
          example:
            errors:
              - error: AuthError
                message: "Unauthorized, authentication token must be provided"
    Unauthorized_403_V3:
      description: Not authorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V3ErrorResponse"
          example:
            errors:
              - error: AuthError
                message: Invalid token
    AdminAuthError:
      description: Authentication Error for Admin endpoints
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message:
              token:
                - "Invalid token: signature, api token is not valid"
    ServiceAuthError:
      description: Authentication Error for endpoints called by services
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V2ErrorMessage"
          example:
            errors:
              - error: "AuthError"
                message: "Invalid token: service id is not the right data type"
            status_code: 403
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message: "Internal server error"
    BadGateway:
      description: Bad gateway
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message: "Mobile app is not initialized"
    ServiceUnavailable:
      description: Service Unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message: "Invalid response from downstream service"

    NotImplemented:
      description: The use of recipient identifiers is not implemented (feature toggle off)
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message: "Not Implemented"
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorMessage"
          example:
            result: "error"
            message: "The requested URL was not found on the server. If you entered the URL manually please check
              your spelling and try again."
    RateLimitError:
      description: Exceeded rate or send limits
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/V2ErrorMessage"
          example:
            errors:
              - error: "RateLimitError"
                message: "Exceeded rate limit for key type TYPE of LIMIT requests per INTERVAL seconds"
            status_code: 429
  schemas:
    Id:
      type: string
      format: uuid
    MobileApp:
      type: string
      nullable: true
      enum:
        - VA_FLAGSHIP_APP
        - VETEXT
      description: >-
        Optional mobile application identifier. By default, VA Flagship mobile app will be used.
    V2ErrorMessage:
      description: Generic error message format for V2
      type: object
      properties:
        status_code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
    V3ErrorResponse:
      description: 4xx and 5xx response for all V3 routes
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
            example:
              error: ValidationError
              message: "Explanation of the validation error"
            required:
              - error
              - message
      required:
        - errors
    V3AcceptedResponse:
      description: 202 Accepted
      type: object
      properties:
        id:
          type: string
          format: uuid
      required:
        - id
    ErrorMessage:
      type: object
      properties:
        message:
          oneOf:
            - type: string
            - type: object
              properties:
                token:
                  type: array
                  items:
                    type: string
              example:
                token:
                  - "Invalid token: signature, api token is not valid"
        result:
          type: string
          example: error
    OrganisationSummary:
      type: object
      properties:
        active:
          nullable: true
          type: boolean
        count_of_live_services:
          type: integer
        domains:
          items:
            type: string
          nullable: true
          type: array
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        organisation_type:
          enum:
            - other
          type: string
    OrganisationDetails:
      type: object
      allOf:
        - $ref: "#/components/schemas/OrganisationSummary"
      properties:
        agreement_signed:
          type: string
          format: date-time
          nullable: true
        agreement_signed_at:
          type: string
          format: date-time
          nullable: true
        agreement_signed_by_id:
          type: string
          format: uuid
          nullable: true
        agreement_signed_on_behalf_of_email_address:
          nullable: true
          type: string
        agreement_signed_on_behalf_of_name:
          nullable: true
          type: string
        agreement_signed_version:
          type: number
        crown:
          type: boolean
        email_branding_id:
          type: string
          format: uuid
          nullable: true
        request_to_go_live_notes:
          nullable: true
          type: string
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email_address:
          type: string
        mobile_number:
          type: string
          description: Required if auth_type is sms_auth
          example: "+12025551212"
        state:
          type: string
        user_permissions:
          type: array
          items:
            type: string
        auth_type:
          type: string
          description: The auth type determines whether email address or mobile number are required.
          enum:
            - sms_auth
            - email_auth
      required:
        - name
        - password
        - email_address
        - user_permissions
    ServiceCallback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        service_id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        callback_type:
          $ref: "#/components/schemas/CallbackType"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
          nullable: true
        updated_by_id:
          type: string
          format: uuid
        notification_statuses:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/NotificationStatus"
        include_provider_payload:
          type: boolean
    CreateCallbackRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        callback_type:
          $ref: "#/components/schemas/CallbackType"
        bearer_token:
          type: string
          description: Required if callback_channel is webhook
        callback_channel:
          $ref: "#/components/schemas/CallbackChannel"
        include_provider_payload:
          type: boolean
      required:
        - url
        - callback_type
        - callback_channel
    CreateDeliveryStatusCallbackRequest:
      allOf:
        - $ref: "#/components/schemas/CreateCallbackRequest"
      properties:
        notification_statuses:
          type: array
          items:
            $ref: "#/components/schemas/NotificationStatus"
    UpdateCallbackRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        bearer_token:
          type: string
        notification_statuses:
          type: array
          items:
            $ref: "#/components/schemas/NotificationStatus"
        include_provider_payload:
          type: boolean
    CallbackType:
      type: string
      enum:
        - delivery_status
        - inbound_sms
        - complaint
    CallbackChannel:
      type: string
      enum:
        - webhook
        - queue
    NotificationStatus:
      description: |
        <p> This field is optional. If not provided, the service will receive updates on all notification statuses by default. If included, the service will only receive updates for the specific statuses listed in this field.
        <p>These statuses do not warrant additional action: cancelled, created, delivered, pending, sending, and sent.</p>
        <p>These statuses indicate a client-side error, such as specifying a nonexistent template ID, or other condition that will result in VA Notify <b>not</b> retrying to send the notification: failed, permanent-failure, and validation-failed.  See the associated status_reason for amplifying information.</p>
        <p>"temporary-failure" indicates that VA Notify will retry sending the notification.</p>
      type: string
      enum:
        - cancelled
        - created
        - delivered
        - failed
        - pending
        - permanent-failure
        - sending
        - sent
        - temporary-failure
        - validation-failed
    User:
      type: object
      properties:
        additional_information:
          type: object
        auth_type:
          type: string
        blocked:
          type: boolean
        current_session_id:
          type: string
        email_address:
          type: string
        failed_login_count:
          type: integer
        id:
          $ref: "#/components/schemas/Id"
        logged_in_at:
          type: string
        mobile_number:
          type: string
          example: "+12025551212"
        name:
          type: string
        organisations:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        password_changed_at:
          type: string
          format: date-time
        permissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              enum:
                - manage_users
                - manage_templates
                - manage_settings
                - send_texts
                - send_emails
                - send_letters
                - manage_api_keys
                - view_activity
        platform_admin:
          type: boolean
        services:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        state:
          type: string
    CreateServiceRequest:
      type: object
      properties:
        active:
          type: boolean
          nullable: true
        created_by:
          $ref: "#/components/schemas/Id"
        email_from:
          type: string
          format: email
        email_provider_id:
          type: string
          nullable: true
        message_limit:
          type: integer
        name:
          type: string
        organisation_id:
          type: string
          format: uuid
          nullable: true
        restricted:
          type: boolean
        sms_provider_id:
          type: string
          nullable: true
        user_id:
          $ref: "#/components/schemas/Id"
      required:
        - active
        - created_by
        - email_from
        - message_limit
        - name
        - organisation_id
        - restricted
        - user_id
    Service:
      type: object
      properties:
        active:
          type: boolean
        all_template_folders:
          type: array
          items:
            type: string
        annual_billing:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        consent_to_research:
          type: boolean
          nullable: true
        contact_link:
          type: string
          nullable: true
        count_as_live:
          type: boolean
        created_by:
          $ref: "#/components/schemas/Id"
        crown:
          type: boolean
          nullable: true
        email_branding:
          $ref: "#/components/schemas/Id"
        email_from:
          type: string
          format: email
        email_provider_id:
          type: string
          nullable: true
        go_live_at:
          type: string
          format: date-time
          nullable: true
        go_live_user:
          $ref: "#/components/schemas/Id"
        id:
          $ref: "#/components/schemas/Id"
        inbound_api:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        inbound_number:
          $ref: "#/components/schemas/Id"
        inbound_sms:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        letter_contact_block:
          type: string
        letter_logo_filename:
          type: string
        message_limit:
          type: number
        name:
          type: string
        organisation:
          $ref: "#/components/schemas/Id"
        organisation_type:
          type: string
          nullable: true
          enum:
            - other
        permissions:
          type: array
          items:
            type: string
            enum:
              - international_sms
              - email
              - sms
              - inbound_sms
              - schedule_notifications
        prefix_sms:
          type: boolean
          nullable: false
        rate_limit:
          type: number
        research_mode:
          type: boolean
        restricted:
          type: boolean
        sending_domain:
          type: string
          nullable: true
        service_callback_api:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        service_data_retention:
          type: array
          items:
            type: string
        sms_provider_id:
          type: string
          nullable: true
        smtp_user:
          type: string
          nullable: true
        users:
          type: array
          items:
            $ref: "#/components/schemas/Id"
        version:
          type: number
        volume_email:
          type: integer
          nullable: true
        volume_letter:
          type: integer
          nullable: true
        volume_sms:
          type: integer
          nullable: true
        whitelist:
          type: array
          items:
            $ref: "#/components/schemas/Id"
    CreateTemplateRequest:
      type: object
      properties:
        content:
          type: string
        created_by:
          $ref: "#/components/schemas/Id"
        name:
          type: string
        postage:
          type: string
        process_type:
          type: string
          enum:
            - normal
            - priority
        provider_id:
          type: string
          nullable: true
        communication_item_id:
          type: string
          nullable: true
        service:
          $ref: "#/components/schemas/Id"
        subject:
          type: string
        template_type:
          type: string
          enum:
            - sms
            - email
      required:
        - name
        - template_type
        - content
        - service
        - created_by
    CreateTemplateRequestSms:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateTemplateRequest"
      properties:
        template_type:
          type: string
          enum:
            - sms
    CreateTemplateRequestEmail:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateTemplateRequestSms"
      properties:
        template_type:
          type: string
          enum:
            - email
      required:
        - subject
    Template:
      type: object
      allOf:
        - $ref: "#/components/schemas/CreateTemplateRequest"
      properties:
        archived:
          type: boolean
        created_at:
          type: string
          format: date-time
        folder:
          $ref: "#/components/schemas/Id"
        hidden:
          type: boolean
        id:
          $ref: "#/components/schemas/Id"
        provider_id:
          type: string
          nullable: true
        redact_personalisation:
          type: boolean
        reply_to:
          $ref: "#/components/schemas/Id"
        reply_to_text:
          type: string
        service_letter_contact:
          $ref: "#/components/schemas/Id"
        template_redacted:
          $ref: "#/components/schemas/Id"
        updated_at:
          type: string
          format: date-time
        version:
          type: number
        content_as_html:
          type: string
          nullable: true
        content_as_plain_text:
          type: string
          nullable: true
    CreateHTMLPreviewRequest:
      type: object
      properties:
        content:
          type: string
    CommunicationItem:
      type: object
      properties:
        default_send_indicator:
          type: boolean
          nullable: false
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          minLength: 1
          nullable: false
        va_profile_item_id:
          type: integer
          minimum: 1
          nullable: false
      additionalProperties: false
    CommunicationItemUpdate:
      type: object
      properties:
        default_send_indicator:
          type: boolean
          nullable: false
        name:
          type: string
          minLength: 1
          nullable: false
        va_profile_item_id:
          type: integer
          minimum: 1
          nullable: false
      additionalProperties: false
      minProperties: 1
    CommunicationItemCreate:
      type: object
      properties:
        default_send_indicator:
          type: boolean
          nullable: false
        name:
          type: string
          minLength: 1
          nullable: false
        va_profile_item_id:
          type: integer
          minimum: 1
          nullable: false
      additionalProperties: false
      required: [name, va_profile_item_id]
    NotificationRequest:
      type: object
      properties:
        reference:
          type: string
        template_id:
          $ref: "#/components/schemas/Id"
        personalisation:
          $ref: "#/components/schemas/Personalisation"
        scheduled_for:
          type: string
          format: date-time
          description: datetime within next day
        billing_code:
          type: string
          maxLength: 256
        callback_url:
          type: string
          format: uri
          maxLength: 255
      required:
        - template_id
    SMSNotificationRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationRequest"
        - type: object
          properties:
            sms_sender_id:
              $ref: "#/components/schemas/Id"

          anyOf:
            - properties:
                phone_number:
                  type: string
                  example: "+12025551212"
              required: [phone_number]
            - properties:
                recipient_identifier:
                  $ref: "#/components/schemas/RecipientIdentifier"
              required: [recipient_identifier]
    EmailNotificationRequest:
      allOf:
        - $ref: "#/components/schemas/NotificationRequest"
        - type: object
          anyOf:
            - properties:
                email_address:
                  type: string
                  format: email
              required: [email_address]
            - properties:
                recipient_identifier:
                  $ref: "#/components/schemas/RecipientIdentifier"
              required: [recipient_identifier]
    PushNotificationRequest:
      type: object
      properties:
        mobile_app:
          $ref: "#/components/schemas/MobileApp"
        template_id:
          type: string
          example: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        personalisation:
          $ref: "#/components/schemas/Personalisation"
        recipient_identifier:
          type: object
          properties:
            id_type:
              type: string
              enum:
                - ICN
            id_value:
              type: string
          required:
            - id_type
            - id_value
          example:
            id_type: ICN
            id_value: 1008788712V759106
      required:
        - recipient_identifier
        - template_id
    PushNotificationBroadcastRequest:
      type: object
      properties:
        mobile_app:
          $ref: "#/components/schemas/MobileApp"
        template_id:
          type: string
          example: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
        personalisation:
          $ref: "#/components/schemas/PushBroadcastPersonalisation"
        topic_sid:
          type: string
          example: XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
      required:
        - template_id
        - topic_sid
    V3NotificationsEmailRequest:
      type: object
      properties:
        billing_code:
          type: string
          maxLength: 256
        client_reference:
          type: string
        personalisation:
          $ref: "#/components/schemas/Personalisation"
        reference:
          type: string
        scheduled_for:
          description: An ISO 8601 formatted date-time string with timezone info
          type: string
          format: date-time
        template_id:
          $ref: "#/components/schemas/Id"
      additionalProperties: false
      required:
        - template_id
      anyOf:
        - properties:
            email_address:
              type: string
              format: email
          required: [email_address]
        - properties:
            recipient_identifier:
              $ref: "#/components/schemas/RecipientIdentifier"
          required: [recipient_identifier]
    V3NotificationsSMSRequest:
      type: object
      properties:
        billing_code:
          type: string
          maxLength: 256
        client_reference:
          type: string
        personalisation:
          $ref: "#/components/schemas/Personalisation"
        reference:
          type: string
        scheduled_for:
          description: An ISO 8601 formatted date-time string with timezone info
          type: string
          format: date-time
        sms_sender_id:
          $ref: "#/components/schemas/Id"
        template_id:
          $ref: "#/components/schemas/Id"
      additionalProperties: false
      required:
        - template_id
      anyOf:
        - properties:
            phone_number:
              type: string
          required: [phone_number]
        - properties:
            recipient_identifier:
              $ref: "#/components/schemas/RecipientIdentifier"
          required: [recipient_identifier]
    Personalisation:
      type: object
      description: The personalisation values created in the template must be defined here.
      additionalProperties:
        oneOf:
          - type: string
          - $ref: "#/components/schemas/Attachment"
      example:
        "full_name": "John Smith"
        "claim_id": "123456"
    PushBroadcastPersonalisation:
      type: object
      description: The personalisation values created in the template must be defined here.
      additionalProperties:
        oneOf:
          - type: string
          - $ref: "#/components/schemas/Attachment"
      example:
        "message": "New update for the Mobile App..."
    InboundNumberResponseData:
      type: object
      properties:
        active:
          type: boolean
        auth_parameter:
          type: string
        id:
          type: string
          format: uuid
        number:
          type: string
        provider:
          type: string
        self_managed:
          type: boolean
        service:
          type: object
          properties:
            id:
              type: string
              format: uuid
            name:
              type: string
          nullable: true
        url_endpoint:
          type: string
    InboundNumberUpdateRequest:
      type: object
      properties:
        active:
          type: boolean
        auth_parameter:
          type: string
        number:
          type: string
        provider:
          type: string
        self_managed:
          type: boolean
          description: "If this is true, 'url_endpoint' must be populated."
        url_endpoint:
          type: string
          description: "Required to be populated when 'self_managed' is true."
      additionalProperties: false
      minProperties: 1
    InboundNumberCreateRequest:
      type: object
      properties:
        active:
          type: boolean
        auth_parameter:
          type: string
        number:
          type: string
        provider:
          type: string
        self_managed:
          type: boolean
          description: "If this is true, 'url_endpoint' is required."
        url_endpoint:
          type: string
          description: "Required when 'self_managed' is true."
      required:
        - number
        - provider
      additionalProperties: false
    InboundNumberCreateResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/InboundNumberResponseData"
    InboundNumbersGetResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/InboundNumberResponseData"
    Notification:
      type: object
      properties:
        billing_code:
          type: string
        callback_url:
          type: string
          format: uri
        id:
          $ref: "#/components/schemas/Id"
        reference:
          type: string
        scheduled_for:
          type: string
        template:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/Id"
            version:
              type: integer
            uri:
              type: string
              format: uri
        uri:
          type: string
          format: uri
    NotificationStatusResponse:
      type: object
      properties:
        billing_code:
          type: string
        body:
          type: string
        callback_url:
          type: string
          format: uri
        completed_at:
          type: string
          format: date-time
          nullable: true
        cost_in_millicents:
          type: number
        created_at:
          type: string
          format: date-time
        created_by_name:
          description: the user who requested for this notification
          type: string
          nullable: true
        email_address:
          type: string
          format: email
          nullable: true
        id:
          $ref: "#/components/schemas/Id"
        line_1:
          type: string
          nullable: true
        line_2:
          type: string
          nullable: true
        line_3:
          type: string
          nullable: true
        line_4:
          type: string
          nullable: true
        line_5:
          type: string
          nullable: true
        line_6:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          example: "+16502532222"
        postage:
          type: string
        postcode:
          type: string
          nullable: true
        provider_reference:
          type: string
          nullable: true
        recipient_identifiers:
          type: array
          items:
            $ref: "#/components/schemas/RecipientIdentifier"
        reference:
          type: string
          nullable: true
        scheduled_for:
          type: string
          format: date-time
          nullable: true
        segments_count:
          type: integer
        sent_at:
          type: string
          format: date-time
          nullable: true
        sent_by:
          type: string
          nullable: true
          description: The provider that sent or tried to send the notification
        status:
          $ref: "#/components/schemas/NotificationStatus"
        status_reason:
          type: string
          nullable: true
        subject:
          type: string
          nullable: true
        template:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/Id"
            uri:
              type: string
            version:
              type: integer
        type:
          type: string
          enum:
            - sms
            - email
    APIKey:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: "#/components/schemas/Id"
        expiry_date:
          type: string
          format: date-time
          nullable: true
        id:
          $ref: "#/components/schemas/Id"
        key_type:
          type: string
          enum:
            - normal
            - team
        name:
          type: string
        revoked:
          type: boolean
          default: false
        updated_at:
          type: string
          format: date-time
          nullable: true
        version:
          type: integer
    RecipientIdentifier:
      type: object
      properties:
        id_type:
          type: string
          enum:
            - VAPROFILEID
            - PID
            - ICN
            - BIRLSID
            - EDIPI
        id_value:
          type: string
      required:
        - id_type
        - id_value
    ServiceSmsSender:
      type: object
      properties:
        archived:
          type: boolean
        created_at:
          type: string
          format: date-time
        description:
          type: string
          example: This is a description.
        id:
          $ref: "#/components/schemas/Id"
        inbound_number_id:
          $ref: "#/components/schemas/Id"
        is_default:
          type: boolean
        provider_id:
          $ref: "#/components/schemas/Id"
        provider_name:
          type: string
        rate_limit:
          type: integer
        rate_limit_interval:
          type: integer
        service_id:
          $ref: "#/components/schemas/Id"
        sms_sender:
          type: string
        sms_sender_specifics:
          description: Arbitrary JSON relevant to a specific messaging service provider
          type: object
          example: '{"messaging_service_sid": "MG0000000000000000000000"}'
        updated_at:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        file:
          type: string
          description: base64 encoded data
        filename:
          type: string
  securitySchemes:
    adminAuth:
      description: "The admin user and secret are used to generate this authentication.  They are both defined as
        configuration parameters"
      type: http
      scheme: bearer
      bearerFormat: JWT
    serviceAuth:
      description: "The format of this token is {key_name}-{iss-uuid}-{secret-key-uuid}.  When you
        create API key you get the secret key in the response. This secret key should be used
        to generate a bearer token to send notifications and enquire notification status. You can find
        more at <a href='https://docs.notifications.service.gov.uk/rest-api.html#headers'>Authentication
        headers</a>."
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - adminAuth: []
