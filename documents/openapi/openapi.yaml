openapi: 3.0.0
info:
  title: VA Notify API Documentation
  description: "This documents the API schemas for consumption by internal VA developers.<br />
  <h1>Authorization header</h1>
  <p>You must include an authorization header that is encoded using JSON Web Tokens.
  JSON Web Tokens have a standard header and a payload. The header consists of:
  <pre><code>
  {\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;type&quot;: &quot;JWT&quot;,\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;alg&quot;: &quot;HS256&quot;\n
  &nbsp;}
  </code></pre>
  </p>
  <p>
  The payload consists of `iss` and `iat`. `iss` is the `service_id` that is sending the notification, and `iat` is
  the 'Issued At' timestamp in seconds since Unix epoch. Here is an example payload:
  <pre><code>
  {\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;iss&quot;: &quot;26785a09-ab16-4eb0-8407-a37497a57506&quot;,\n
  &nbsp;&nbsp;&nbsp;&nbsp;&quot;iat&quot;: 1568818578\n
  &nbsp;}
  </code></pre>
  </p>
  <p>
    Refer to the <a href='https://jwt.io/' target='_blank'>JSON Web Tokens website</a> for more information
    on encoding your authorization header.
  </p>"
  version: 1.0.0
  contact:
    name: VA Notify team
servers:
  - url: 'https://{environment}.notifications.va.gov'
    variables:
      environment:
        enum:
          - staging.api
          - dev.api
          - api
        default: api
paths:
  /organisations:
    get:
      summary: Get list of all organisations
      tags:
        - organisation
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrganisationSummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create an organisation
      tags:
        - organisation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  type: boolean
                name:
                  type: string
                organisation_type:
                  type: string
                  enum:
                    - other
              required:
                - crown
                - name
                - organisation_type
              type: object
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationDetails'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /organisations/{organisation_id}/:
    get:
      summary: Find organisation by id
      tags:
        - organisation
      parameters:
        - $ref: '#/components/parameters/OrganisationId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrganisationDetails'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Update an organization
      tags:
        - organisation
      parameters:
        - $ref: '#/components/parameters/OrganisationId'
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              properties:
                active:
                  nullable: true
                  type: boolean
                crown:
                  nullable: true
                  type: boolean
                name:
                  nullable: true
                  type: string
                organisation_type:
                  type: string
                  enum:
                    - other
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /user:
    post:
      summary: Create a user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get a list of all users
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
  /user/{user_id}:
    get:
      summary: Get a user
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: Update a user
      tags:
        - user
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                email_address:
                  type: string
                mobile_number:
                  type: string
                  example: "+19876543210"
                auth_type:
                  type: string
                  format: auth type
                  enum:
                    - sms_auth
                    - email_auth
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service:
    post:
      summary: Create a service
      tags:
        - service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateServiceRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      summary: Get all services
      tags:
        - service
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}:
    get:
      summary: Get a service
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Update a service
      tags:
        - service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        description: Include values in the request body to update them
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Service'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Service'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/sms-sender:
    get:
      summary: Get all sms-senders for a service
      tags:
        - service
        - sms sender
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceSmsSender'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add sms sender for a service
      tags:
        - service
        - sms sender
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/ServiceSmsSender'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/sms-sender/{sms-sender-id}:
    get:
      summary: Get specific sms sender for a service
      tags:
        - service
        - sms sender
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/ServiceSmsSenderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/ServiceSmsSender'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Update sms sender for a service
      tags:
        - service
        - sms sender
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/ServiceSmsSenderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/ServiceSmsSender'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/sms-sender/{sms-sender-id}/archive:
    post:
      summary: Delete aka archive an sms sender
      tags:
        - service
        - sms sender
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/ServiceSmsSenderId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    items:
                      $ref: '#/components/schemas/ServiceSmsSender'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/callback:
    get:
      summary: Get all callbacks for a service
      tags:
        - callback
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ServiceCallback'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a callback for a service
      tags:
        - callback
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateCallbackRequest'
                - $ref: '#/components/schemas/CreateDeliveryStatusCallbackRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCallback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/callback/{callback_id}:
    get:
      summary: Get a callback for a service by its id
      tags:
        - callback
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/CallbackId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCallback'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Update a callback for a service
      tags:
        - callback
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/CallbackId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/UpdateCallbackRequest'
      responses:
        '200':
          description: UPDATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ServiceCallback'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Remove a callback for a service
      tags:
        - callback
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/CallbackId'
      responses:
        '204':
          description: DELETED
          content:
            application/json:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/service/{service_id}/template':
    get:
      summary: Get all templates for a service
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Template'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a template for a service
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CreateTemplateRequestSms'
                - $ref: '#/components/schemas/CreateTemplateRequestEmail'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/service/{service_id}/template/{template_id}':
    get:
      summary: Get a template for a service
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/TemplateId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Update a template
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/TemplateId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Template'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/service/{service_id}/template/preview':
    post:
      summary: Cretate template html preview
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateHTMLPreviewRequest'
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  '/service/{service_id}/template/{template_id}/stats':
    get:
      summary: Get usage statistics for a particular template on a service
      tags:
        - template
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/TemplateId'
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          required: false
          description: Oldest date to get stats for
        - in: query
          name: end_date
          schema:
            type: string
            format: date
          required: false
          description: Newest date to get stats for
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /communication-item:
    get:
      summary: Get a list of all communication items
      tags:
        - communication-item
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/CommunicationItem'

  /service/{service_id}/api-key:
    post:
      tags:
        - api key
      summary: Create API key for service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                created_by:
                  description: User id who creates this key
                  $ref: '#/components/schemas/Id'
                key_type:
                  type: string
                  enum:
                    - normal
                    - team
              required:
                - name
                - created_by
                - key_type
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                description: The API Key
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Id'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/api-key/revoke/{api_key_id}:
    post:
      tags:
        - api key
      summary: Revoke API key
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/ApiKeyId'
      responses:
        '202':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/api-keys:
    get:
      tags:
        - api key
      summary: Get API keys for a service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /service/{service_id}/api-keys/{api_key_id}:
    get:
      tags:
        - api key
      summary: Get a specific API key for a service
      parameters:
        - $ref: '#/components/parameters/ServiceId'
        - $ref: '#/components/parameters/ApiKeyId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  apiKeys:
                    type: array
                    items:
                      $ref: '#/components/schemas/APIKey'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/AdminAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /v2/notifications/email:
    post:
      summary: Send an email notification
      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmailNotificationRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Notification'
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          body:
                            type: string
                          subject:
                            type: string
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ServiceAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'
        '501':
          $ref: '#/components/responses/NotImplemented'
  /v2/notifications/sms:
    post:
      summary: Send an sms notification
      security:
        - serviceAuth: []
      tags:
        - notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSNotificationRequest'
      responses:
        '201':
          description: CREATED
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Notification'
                  - type: object
                    properties:
                      content:
                        type: object
                        properties:
                          body:
                            type: string
                          from_number:
                            type: string
                            example: "+19876543210"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ServiceAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitError'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /v2/notifications/{notification_id}:
    get:
      summary: Get notification status and details
      security:
        - serviceAuth: []
      tags:
        - notification
      parameters:
        - $ref: '#/components/parameters/NotificationId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationStatusResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/ServiceAuthError'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  parameters:
    OrganisationId:
      name: organisation_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Organisation identifier
    UserId:
      name: user_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: User identifier
    ServiceId:
      name: service_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Service identifier
    CallbackId:
      name: callback_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Callback identifier
    TemplateId:
      name: template_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Template identifier
    ApiKeyId:
      name: api_key_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: API Key identifier
    NotificationId:
      name: notification_id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Notification identifier
    ServiceSmsSenderId:
      name: sms-sender-id
      in: path
      schema:
        $ref: '#/components/schemas/Id'
      required: true
      description: Service SMS sender identifier
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ErrorMessage'
          example:
            errors:
              - error: 'BadRequestError'
                message: 'sms_sender_id e925b547-8195-4ed2-83c5-0633a74d780a does not exist in database
                                  for service id 9ffb5212-e621-45df-820d-97ee65d392ab'
            status_code: 400
    Unauthorized:
      description: No Bearer authentication provided
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            result: 'error'
            message:
              token:
                - 'Unauthorized, authentication token must be provided'
    AdminAuthError:
      description: Authentication Error for Admin endpoints
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            result: 'error'
            message:
              token:
                - 'Invalid token: signature, api token is not valid'
    ServiceAuthError:
      description: Authentication Error for endpoints called by services
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ErrorMessage'
          example:
            errors:
              - error: 'AuthError'
                message: 'Invalid token: service id is not the right data type'
            status_code: 403
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            result: 'error'
            message: 'Internal server error'
    NotImplemented:
      description: The use of recipient identifiers is not implemented (feature toggle off)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            result: 'error'
            message: 'Not Implemented'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorMessage'
          example:
            result: 'error'
            message: 'The requested URL was not found on the server. If you entered the URL manually please check
                    your spelling and try again.'
    RateLimitError:
      description: Exceeded rate or send limits
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/V2ErrorMessage'
          example:
            errors:
              - error: 'RateLimitError'
                message: 'Exceeded rate limit for key type TYPE of LIMIT requests per INTERVAL seconds'
            status_code: 429
  schemas:
    Id:
      type: string
      format: uuid
    V2ErrorMessage:
      description: Generic error message format for V2
      type: object
      properties:
        status_code:
          type: integer
        errors:
          type: array
          items:
            type: object
            properties:
              error:
                type: string
              message:
                type: string
    ErrorMessage:
      type: object
      properties:
        message:
          oneOf:
            - type: string
            - type: object
              properties:
                token:
                  type: array
                  items:
                    type: string
              example:
                token:
                  - 'Invalid token: signature, api token is not valid'
        result:
          type: string
          example: error
    OrganisationSummary:
      type: object
      properties:
        active:
          nullable: true
          type: boolean
        count_of_live_services:
          type: integer
        domains:
          items:
            type: string
          nullable: true
          type: array
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        organisation_type:
          enum:
            - other
          type: string
    OrganisationDetails:
      type: object
      allOf:
        - $ref: '#/components/schemas/OrganisationSummary'
      properties:
        agreement_signed:
          format: datetime
          nullable: true
          type: string
        agreement_signed_at:
          format: datetime
          nullable: true
          type: string
        agreement_signed_by_id:
          format: uuid
          nullable: true
          type: string
        agreement_signed_on_behalf_of_email_address:
          nullable: true
          type: string
        agreement_signed_on_behalf_of_name:
          nullable: true
          type: string
        agreement_signed_version:
          type: number
        crown:
          type: boolean
        email_branding_id:
          format: uuid
          nullable: true
          type: string
        letter_branding_id:
          format: uuid
          nullable: true
          type: string
        request_to_go_live_notes:
          nullable: true
          type: string
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        password:
          type: string
        email_address:
          type: string
        mobile_number:
          type: string
          description: Required if auth_type is sms_auth
          example: "+19876543210"
        state:
          type: string
        user_permissions:
          type: array
          items:
            type: string
        auth_type:
          type: string
          format: auth type
          description: The auth type determines whether email address or mobile number are required.
          enum:
            - sms_auth
            - email_auth
      required:
        - name
        - password
        - email_address
        - user_permissions
    ServiceCallback:
      type: object
      properties:
        id:
          type: string
          format: uuid
        service_id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
        callback_type:
          $ref: '#/components/schemas/CallbackType'
        created_at:
          type: string
          format: datetime
        updated_at:
          type: string
          format: datetime
          nullable: true
        updated_by_id:
          type: string
          format: uuid
        notification_statuses:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/NotificationStatus'
    CreateCallbackRequest:
      type: object
      properties:
        url:
          type: string
          format: uri
        callback_type:
          $ref: '#/components/schemas/CallbackType'
        bearer_token:
          type: string
          description: Required if callback_channel is webhook
        callback_channel:
          $ref: '#/components/schemas/CallbackChannel'
      required:
        - url
        - callback_type
        - callback_channel
    CreateDeliveryStatusCallbackRequest:
      allOf:
        - $ref: '#/components/schemas/CreateCallbackRequest'
      properties:
        notification_statuses:
          type: array
          items:
            $ref: '#/components/schemas/NotificationStatus'
      required:
        - notification_statuses
    UpdateCallbackRequest:
      allOf:
        - $ref: '#/components/schemas/CreateCallbackRequest'
        - type: object
          anyOf:
            - required: [url]
            - required: [bearer_token]
            - required: [notification_statuses]
    CallbackType:
      type: string
      enum:
        - delivery_status
        - inbound_sms
        - complaint
    CallbackChannel:
      type: string
      enum:
        - webhook
        - queue
    NotificationStatus:
      type: string
      enum:
        - cancelled
        - created
        - delivered
        - failed
        - sending
        - sent
        - technical-failure
        - temporary-failure
        - pending
        - pending-virus-check
        - permanent-failure
        - pii-check-failed
        - preferences-declined
        - returned-letter
        - validation-failed
        - virus-scan-failed

    User:
      type: object
      properties:
        additional_information:
          type: object
        auth_type:
          type: string
        blocked:
          type: boolean
        current_session_id:
          type: string
        email_address:
          type: string
        failed_login_count:
          type: integer
        id:
          $ref: '#/components/schemas/Id'
        logged_in_at:
          type: string
        mobile_number:
          type: string
          example: "+19876543210"
        name:
          type: string
        organisations:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        password_changed_at:
          type: string
          format: datetime
        permissions:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
              enum:
                - manage_users
                - manage_templates
                - manage_settings
                - send_texts
                - send_emails
                - send_letters
                - manage_api_keys
                - view_activity
        platform_admin:
          type: boolean
        services:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        state:
          type: string
    CreateServiceRequest:
      type: object
      properties:
        active:
          type: boolean
          nullable: true
        created_by:
          $ref: '#/components/schemas/Id'
        email_from:
          type: string
          format: email
        email_provider_id:
          type: string
          nullable: true
        message_limit:
          type: integer
        name:
          type: string
        organisation_id:
          type: string
          format: uuid
          nullable: true
        restricted:
          type: boolean
        sms_provider_id:
          type: string
          nullable: true
        user_id:
          $ref: '#/components/schemas/Id'
      required:
        - active
        - created_by
        - email_from
        - message_limit
        - name
        - organisation_id
        - restricted
        - user_id
    Service:
      type: object
      properties:
        active:
          type: boolean
        all_template_folders:
          type: array
          items:
            type: string
        annual_billing:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        consent_to_research:
          type: boolean
          nullable: true
        contact_link:
          type: string
          nullable: true
        count_as_live:
          type: boolean
        created_by:
          $ref: '#/components/schemas/Id'
        crown:
          type: boolean
          nullable: true
        email_branding:
          $ref: '#/components/schemas/Id'
        email_from:
          type: string
          format: email
        email_provider_id:
          type: string
          nullable: true
        go_live_at:
          type: string
          format: datetime
          nullable: true
        go_live_user:
          $ref: '#/components/schemas/Id'
        id:
          $ref: '#/components/schemas/Id'
        inbound_api:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        inbound_number:
          $ref: '#/components/schemas/Id'
        inbound_sms:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        letter_branding:
          $ref: '#/components/schemas/Id'
        letter_contact_block:
          type: string
        letter_logo_filename:
          type: string
        message_limit:
          type: number
        name:
          type: string
        organisation:
          $ref: '#/components/schemas/Id'
        organisation_type:
          type: string
          nullable: true
          enum:
            - other
        permissions:
          type: array
          items:
            type: string
            enum:
              - international_sms
              - email
              - sms
              - inbound_sms
              - schedule_notifications
        prefix_sms:
          type: boolean
          nullable:  false
        rate_limit:
          type: number
        research_mode:
          type: boolean
        restricted:
          type: boolean
        sending_domain:
          type: string
          nullable: true
        service_callback_api:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        service_data_retention:
          type: array
          items:
            type: string
        sms_provider_id:
          type: string
          nullable: true
        smtp_user:
          type: string
          nullable: true
        users:
          type: array
          items:
            $ref: '#/components/schemas/Id'
        version:
          type: number
        volume_email:
          type: integer
          nullable: true
        volume_letter:
          type: integer
          nullable: true
        volume_sms:
          type: integer
          nullable: true
        whitelist:
          type: array
          items:
            $ref: '#/components/schemas/Id'
    CreateTemplateRequest:
      type: object
      properties:
        content:
          type: string
        created_by:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        postage:
          type: string
        process_type:
          type: string
          enum:
            - normal
            - priority
        provider_id:
          type: string
          nullable: true
        communication_item_id:
          type: string
          nullable: true
        service:
          $ref: '#/components/schemas/Id'
        subject:
          type: string
        template_type:
          type: string
          enum:
            - sms
            - email
      required:
        - name
        - template_type
        - content
        - service
        - created_by
    CreateTemplateRequestSms:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTemplateRequest'
      properties:
        template_type:
          type: string
          enum:
            - sms
    CreateTemplateRequestEmail:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTemplateRequestSms'
      properties:
        template_type:
          type: string
          enum:
            - email
      required:
        - subject
    Template:
      type: object
      allOf:
        - $ref: '#/components/schemas/CreateTemplateRequest'
      properties:
        archived:
          type: boolean
        created_at:
          type: string
          format: datetime
        folder:
          $ref: '#/components/schemas/Id'
        hidden:
          type: boolean
        id:
          $ref: '#/components/schemas/Id'
        provider_id:
          type: string
          nullable: true
        redact_personalisation:
          type: boolean
        reply_to:
          $ref: '#/components/schemas/Id'
        reply_to_text:
          type: string
        service_letter_contact:
          $ref: '#/components/schemas/Id'
        template_redacted:
          $ref: '#/components/schemas/Id'
        updated_at:
          type: string
          format: datetime
        version:
          type: number
    CreateHTMLPreviewRequest:
      type: object
      properties:
        content:
          type: string
    CommunicationItem:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        va_profile_item_id:
          type: number
    NotificationRequest:
      type: object
      properties:
        reference:
          type: string
        template_id:
          $ref: '#/components/schemas/Id'
        personalisation:
          type: object
          description: The personalisation values created in the template must be defined here.
          additionalProperties:
            oneOf:
              - type: string
              - $ref: '#/components/schemas/Attachment'
          example:
            "full_name": "John Smith"
            "claim_id": "123456"
        scheduled_for:
          type: string
          format: datetime within next day
        billing_code:
          type: string
      required:
        - template_id
    SMSNotificationRequest:
      allOf:
        - $ref: '#/components/schemas/NotificationRequest'
        - type: object
          properties:
            sms_sender_id:
              $ref: '#/components/schemas/Id'

          anyOf:
            - properties:
                phone_number:
                  type: string
                  format: phone_number
                  example: "+19876543210"
              required: [phone_number]
            - properties:
                recipient_identifier:
                  $ref: '#/components/schemas/RecipientIdentifier'
              required: [recipient_identifier]
    EmailNotificationRequest:
      allOf:
        - $ref: '#/components/schemas/NotificationRequest'
        - type: object
          properties:
            email_reply_to_id:
              $ref: '#/components/schemas/Id'
          anyOf:
            - properties:
                email_address:
                  type: string
                  format: email_address
              required: [email_address]
            - properties:
                recipient_identifier:
                  $ref: '#/components/schemas/RecipientIdentifier'
              required: [recipient_identifier]
    Notification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        reference:
          type: string
        uri:
          type: string
          format: uri
        template:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
            version:
              type: integer
            uri:
              type: string
              format: uri
        scheduled_for:
          type: string
    NotificationStatusResponse:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        body:
          type: string
        completed_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
        created_by_name:
          description: the user who requested for this notification
          type: string
          nullable: true
        email_address:
          type: string
          format: email
          nullable: true
        line_1:
          type: string
          nullable: true
        line_2:
          type: string
          nullable: true
        line_3:
          type: string
          nullable: true
        line_4:
          type: string
          nullable: true
        line_5:
          type: string
          nullable: true
        line_6:
          type: string
          nullable: true
        phone_number:
          type: string
          nullable: true
          example:
            '+16502532222'
        postage:
          type: string
        postcode:
          type: string
          nullable: true
        recipient_identifiers:
          type: array
          items:
            $ref: '#/components/schemas/RecipientIdentifier'
        reference:
          type: string
          nullable: true
        scheduled_for:
          type: string
          format: date-time
          nullable: true
        sent_at:
          type: string
          format: date-time
          nullable: true
        sent_by:
          type: string
          nullable: true
          description: The provider that sent or tried to send the notification
        status:
          type: string
          enum:
            - created
        subject:
          type: string
          nullable: true
        template:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
            uri:
              type: string
            version:
              type: integer
        type:
          type: string
          enum:
            - sms
            - email
    APIKey:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        created_by:
          $ref: '#/components/schemas/Id'
        expiry_date:
          type: string
          format: date-time
          nullable: true
        id:
          $ref: '#/components/schemas/Id'
        key_type:
          type: string
          enum:
            - normal
            - team
        name:
          type: string
        updated_at:
          type: string
          format: date-time
          nullable: true
        version:
          type: integer
    RecipientIdentifier:
      type: object
      properties:
        id_type:
          type: string
          enum:
            - VAPROFILEID
            - PID
            - ICN
            - BIRLSID
        id_value:
          type: string
      required:
        - id_type
        - id_value
    ServiceSmsSender:
      type: object
      properties:
        archived: 
          type: boolean
        created_at:
          type: string
          format: date-time
        id:
          $ref: '#/components/schemas/Id'
        inbound_number_id:
          $ref: '#/components/schemas/Id'
        is_default:
          type: boolean
        rate_limit:
          type: integer
        rate_limit_interval:
          type: integer
        service_id:
          $ref: '#/components/schemas/Id'
        sms_sender: 
          type: string
          format: phonenumber
        updated_at:
          type: string
          format: date-time
    Attachment:
      type: object
      properties:
        file:
          type: string
          format: base64
        filename:
          type: string
  securitySchemes:
    adminAuth:
      description: "The admin user and secret are used to generate this authentication.  They are both defined as
                    configuration parameters"
      type: http
      scheme: bearer
      bearerFormat: JWT
    serviceAuth:
      description: "The format of this token is {key_name}-{iss-uuid}-{secret-key-uuid}.  When you
                    create API key you get the secret key in the response. This secret key should be used
                    to generate a bearer token to send notifications and enquire notification status. You can find
                    more at <a href='https://docs.notifications.service.gov.uk/rest-api.html#headers'>Authentication
                    headers</a>."
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - adminAuth: []